{
  "tutorials": [
    {
      "id": "git-basics",
      "title": "Git Basics",
      "description": "Learn the fundamentals of version control with Git. Master init, add, commit, push, and more essential commands.",
      "category": "DevOps",
      "difficulty": "Beginner",
      "duration": 45,
      "lessonCount": 6,
      "icon": "git",
      "color": "#f14e32",
      "order": 1,
      "lessons": [
        {
          "id": "intro",
          "title": "What is Git?",
          "content": "Git is a distributed version control system that tracks changes in your files. Think of it as a time machine for your code!",
          "codeExample": "git --version",
          "duration": 5
        },
        {
          "id": "init",
          "title": "Initialize a Repository",
          "content": "Start tracking your project with Git. This creates a hidden .git folder that stores all the version history.",
          "codeExample": "git init",
          "duration": 8
        },
        {
          "id": "add",
          "title": "Add Files to Staging",
          "content": "Tell Git which files you want to include in your next commit. This is like preparing items to put in a box.",
          "codeExample": "git add .\ngit add index.html",
          "duration": 10
        },
        {
          "id": "commit",
          "title": "Making Your First Commit",
          "content": "Save a snapshot of your project. Each commit is like taking a photo of your project at this moment.",
          "codeExample": "git commit -m \"Add my first HTML file\"",
          "duration": 10
        },
        {
          "id": "remote",
          "title": "Connect to GitHub",
          "content": "Link your local repository to GitHub so you can share your code with others and back it up online.",
          "codeExample": "git remote add origin https://github.com/username/repo.git",
          "duration": 7
        },
        {
          "id": "push",
          "title": "Push to GitHub",
          "content": "Upload your commits to GitHub. Now your code is safely stored online and others can see it!",
          "codeExample": "git push -u origin main",
          "duration": 5
        }
      ]
    },
    {
      "id": "github-actions",
      "title": "GitHub Actions",
      "description": "Build powerful automation workflows with GitHub Actions. Learn YAML syntax, triggers, and deployment strategies.",
      "category": "DevOps",
      "difficulty": "Intermediate",
      "duration": 73,
      "lessonCount": 8,
      "icon": "github",
      "color": "#24292f",
      "order": 2,
      "lessons": [
        {
          "id": "intro",
          "title": "What are GitHub Actions?",
          "content": "GitHub Actions automate tasks in your development workflow. Think of them as robots that can test, build, and deploy your code automatically.",
          "codeExample": "# This will be a workflow file",
          "duration": 8
        },
        {
          "id": "workflow",
          "title": "Creating Your First Workflow",
          "content": "Workflows are defined in YAML files. They tell GitHub Actions what to do when certain events happen.",
          "codeExample": "name: CI\non:\n  push:\n    branches: [ main ]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Run tests\n      run: npm test",
          "duration": 10
        },
        {
          "id": "triggers",
          "title": "Understanding Triggers",
          "content": "Triggers determine when your workflow runs. You can trigger on push, pull requests, schedules, or manual dispatch.",
          "codeExample": "on:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n  schedule:\n    - cron: '0 2 * * 1'  # Every Monday at 2 AM\n  workflow_dispatch:  # Manual trigger",
          "duration": 8
        },
        {
          "id": "jobs",
          "title": "Jobs and Steps",
          "content": "Jobs run in parallel by default. Each job contains steps that run sequentially. Learn how to organize your workflow efficiently.",
          "codeExample": "jobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Setup Node.js\n      uses: actions/setup-node@v3\n      with:\n        node-version: '18'\n    - name: Install dependencies\n      run: npm ci\n    - name: Run tests\n      run: npm test",
          "duration": 12
        },
        {
          "id": "actions",
          "title": "Using Pre-built Actions",
          "content": "The GitHub Marketplace has thousands of pre-built actions. Learn how to use them to save time and add powerful functionality.",
          "codeExample": "- name: Deploy to AWS\n  uses: aws-actions/configure-aws-credentials@v2\n  with:\n    aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n    aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n    aws-region: us-east-1",
          "duration": 10
        },
        {
          "id": "secrets",
          "title": "Managing Secrets",
          "content": "Keep sensitive data like API keys and passwords secure using GitHub Secrets. Never expose credentials in your code!",
          "codeExample": "- name: Deploy\n  env:\n    API_KEY: ${{ secrets.API_KEY }}\n    DATABASE_URL: ${{ secrets.DATABASE_URL }}\n  run: |\n    echo \"Deploying with secure credentials\"\n    deploy-script.sh",
          "duration": 8
        },
        {
          "id": "matrix",
          "title": "Matrix Builds",
          "content": "Test your code across multiple environments simultaneously. Matrix builds help ensure compatibility across different versions and platforms.",
          "codeExample": "strategy:\n  matrix:\n    node-version: [16, 18, 20]\n    os: [ubuntu-latest, windows-latest, macos-latest]\nruns-on: ${{ matrix.os }}\nsteps:\n- uses: actions/setup-node@v3\n  with:\n    node-version: ${{ matrix.node-version }}",
          "duration": 10
        },
        {
          "id": "artifacts",
          "title": "Artifacts and Outputs",
          "content": "Share data between jobs and preserve build artifacts. Learn how to pass files and information through your workflow.",
          "codeExample": "- name: Upload coverage reports\n  uses: actions/upload-artifact@v3\n  with:\n    name: coverage-report\n    path: coverage/\n- name: Download coverage\n  uses: actions/download-artifact@v3\n  with:\n    name: coverage-report",
          "duration": 7
        }
      ]
    },
    {
      "id": "deploy-react",
      "title": "Deploy React App",
      "description": "Deploy React applications to production using Vercel. Learn about build optimization and environment variables.",
      "category": "DevOps",
      "difficulty": "Intermediate",
      "duration": 36,
      "lessonCount": 5,
      "icon": "react",
      "color": "#00d8ff",
      "order": 3,
      "lessons": [
        {
          "id": "intro",
          "title": "Preparing for Deployment",
          "content": "Before deploying, we need to make sure our React app is ready for production. This includes optimizing the build.",
          "codeExample": "npm run build",
          "duration": 6
        },
        {
          "id": "vercel",
          "title": "Deploy to Vercel",
          "content": "Vercel makes it easy to deploy React apps. Just connect your GitHub repo and it handles the rest!",
          "codeExample": "# Install Vercel CLI\nnpm i -g vercel\n\n# Deploy from command line\nvercel --prod",
          "duration": 8
        },
        {
          "id": "env-vars",
          "title": "Environment Variables",
          "content": "Learn how to manage environment variables for different deployment environments. Keep your secrets safe!",
          "codeExample": "# .env.local\nREACT_APP_API_URL=https://api.example.com\nREACT_APP_GA_ID=GA-XXXXXXX\n\n# In your React app\nconst apiUrl = process.env.REACT_APP_API_URL;",
          "duration": 6
        },
        {
          "id": "optimization",
          "title": "Build Optimization",
          "content": "Optimize your React app for production with code splitting, lazy loading, and bundle analysis.",
          "codeExample": "# Analyze bundle size\nnpm run build\nnpx webpack-bundle-analyzer build/static/js/*.js\n\n# Code splitting example\nconst LazyComponent = React.lazy(() => import('./LazyComponent'));",
          "duration": 8
        },
        {
          "id": "custom-domain",
          "title": "Custom Domain Setup",
          "content": "Connect your own domain to your deployed app. Learn about DNS, SSL certificates, and domain configuration.",
          "codeExample": "# Add custom domain in Vercel dashboard\n# Configure DNS records:\n# Type: CNAME\n# Name: www\n# Value: cname.vercel-dns.com",
          "duration": 8
        }
      ]
    },
    {
      "id": "docker-basics",
      "title": "Docker Fundamentals",
      "description": "Learn containerization with Docker. Master images, containers, Dockerfile, and multi-stage builds for consistent deployments.",
      "category": "DevOps",
      "difficulty": "Intermediate",
      "duration": 58,
      "lessonCount": 6,
      "icon": "docker",
      "color": "#2496ed",
      "order": 4,
      "lessons": [
        {
          "id": "intro",
          "title": "What is Docker?",
          "content": "Docker packages applications and their dependencies into containers. Think of containers as lightweight, portable virtual machines.",
          "codeExample": "# Check Docker installation\ndocker --version\ndocker run hello-world",
          "duration": 8
        },
        {
          "id": "images",
          "title": "Images and Containers",
          "content": "Images are blueprints, containers are running instances. Learn the difference and how to manage both effectively.",
          "codeExample": "# List images\ndocker images\n\n# Run a container\ndocker run -d -p 80:80 nginx\n\n# List running containers\ndocker ps",
          "duration": 10
        },
        {
          "id": "dockerfile",
          "title": "Writing Dockerfiles",
          "content": "Create custom images with Dockerfile. Define your application environment step by step.",
          "codeExample": "FROM node:18-alpine\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci --only=production\nCOPY . .\nEXPOSE 3000\nCMD [\"npm\", \"start\"]",
          "duration": 12
        },
        {
          "id": "build",
          "title": "Building and Tagging",
          "content": "Build your custom images and tag them properly for organization and versioning.",
          "codeExample": "# Build an image\ndocker build -t myapp:latest .\n\n# Tag for different environments\ndocker tag myapp:latest myapp:v1.2.0\ndocker tag myapp:latest myregistry.com/myapp:latest",
          "duration": 8
        },
        {
          "id": "volumes",
          "title": "Volumes and Data",
          "content": "Persist data beyond container lifecycle. Learn about volumes, bind mounts, and data management.",
          "codeExample": "# Create a volume\ndocker volume create mydata\n\n# Run with volume\ndocker run -v mydata:/app/data myapp\n\n# Bind mount\ndocker run -v $(pwd):/app/src myapp",
          "duration": 8
        },
        {
          "id": "compose",
          "title": "Docker Compose",
          "content": "Orchestrate multi-container applications with Docker Compose. Define your entire stack in one file.",
          "codeExample": "version: '3.8'\nservices:\n  web:\n    build: .\n    ports:\n      - \"3000:3000\"\n    depends_on:\n      - db\n  db:\n    image: postgres:13\n    environment:\n      POSTGRES_DB: myapp",
          "duration": 12
        }
      ]
    },
    {
      "id": "testing-automation",
      "title": "Testing & CI/CD",
      "description": "Build robust testing pipelines with unit tests, integration tests, and automated quality checks in your CI/CD workflow.",
      "category": "DevOps",
      "difficulty": "Intermediate", 
      "duration": 63,
      "lessonCount": 7,
      "icon": "test",
      "color": "#10b981",
      "order": 5,
      "lessons": [
        {
          "id": "testing-pyramid",
          "title": "The Testing Pyramid",
          "content": "Understand different types of tests: unit, integration, and end-to-end. Learn when to use each type for maximum effectiveness.",
          "codeExample": "// Unit test example\ntest('adds 1 + 2 to equal 3', () => {\n  expect(add(1, 2)).toBe(3);\n});\n\n// Integration test\ntest('user can create account', async () => {\n  const response = await request(app)\n    .post('/api/users')\n    .send({ email: 'test@example.com' });\n  expect(response.status).toBe(201);\n});",
          "duration": 8
        },
        {
          "id": "jest-setup",
          "title": "Setting up Jest",
          "content": "Configure Jest for JavaScript/TypeScript testing. Set up test scripts, coverage reports, and watch mode.",
          "codeExample": "// package.json\n{\n  \"scripts\": {\n    \"test\": \"jest\",\n    \"test:watch\": \"jest --watch\",\n    \"test:coverage\": \"jest --coverage\"\n  }\n}\n\n// jest.config.js\nmodule.exports = {\n  testEnvironment: 'node',\n  coverageThreshold: {\n    global: {\n      branches: 80,\n      functions: 80,\n      lines: 80\n    }\n  }\n};",
          "duration": 10
        },
        {
          "id": "ci-testing",
          "title": "CI Testing Pipeline",
          "content": "Integrate testing into your GitHub Actions workflow. Run tests on every push and pull request.",
          "codeExample": "name: CI\non: [push, pull_request]\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - uses: actions/setup-node@v3\n      with:\n        node-version: '18'\n    - run: npm ci\n    - run: npm test -- --coverage\n    - name: Upload coverage\n      uses: codecov/codecov-action@v3",
          "duration": 10
        },
        {
          "id": "parallel-tests",
          "title": "Parallel Testing",
          "content": "Speed up your test suite by running tests in parallel across multiple jobs and environments.",
          "codeExample": "jobs:\n  test:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        node-version: [16, 18, 20]\n        test-group: [unit, integration, e2e]\n    steps:\n    - uses: actions/checkout@v3\n    - uses: actions/setup-node@v3\n      with:\n        node-version: ${{ matrix.node-version }}\n    - run: npm ci\n    - run: npm run test:${{ matrix.test-group }}",
          "duration": 8
        },
        {
          "id": "quality-gates",
          "title": "Quality Gates",
          "content": "Set up code quality checks with linting, formatting, and coverage thresholds. Prevent poor code from reaching production.",
          "codeExample": "# Add to GitHub Actions\n- name: Lint code\n  run: npm run lint\n- name: Check formatting\n  run: npm run format:check\n- name: Type check\n  run: npm run type-check\n- name: Coverage check\n  run: |\n    npm run test:coverage\n    npx nyc check-coverage --lines 80",
          "duration": 8
        },
        {
          "id": "e2e-testing",
          "title": "End-to-End Testing",
          "content": "Test complete user workflows with Playwright or Cypress. Ensure your app works from the user's perspective.",
          "codeExample": "// Playwright example\nimport { test, expect } from '@playwright/test';\n\ntest('user can complete signup flow', async ({ page }) => {\n  await page.goto('/signup');\n  await page.fill('[data-testid=\"email\"]', 'user@example.com');\n  await page.fill('[data-testid=\"password\"]', 'password123');\n  await page.click('[data-testid=\"submit\"]');\n  await expect(page).toHaveURL('/dashboard');\n});",
          "duration": 12
        },
        {
          "id": "test-reports",
          "title": "Test Reports & Metrics",
          "content": "Generate comprehensive test reports and track testing metrics over time. Make data-driven decisions about code quality.",
          "codeExample": "# Generate reports\nnpm run test:coverage -- --reporter=html\nnpm run test:e2e -- --reporter=html\n\n# GitHub Actions reporting\n- name: Test Report\n  uses: dorny/test-reporter@v1\n  if: success() || failure()\n  with:\n    name: Jest Tests\n    path: reports/jest-*.xml\n    reporter: jest-junit",
          "duration": 7
        }
      ]
    },
    {
      "id": "advanced-git",
      "title": "Advanced Git & Collaboration",
      "description": "Master Git workflows, branching strategies, and team collaboration. Learn GitFlow, rebasing, and conflict resolution.",
      "category": "DevOps",
      "difficulty": "Advanced",
      "duration": 50,
      "lessonCount": 6,
      "icon": "git-branch",
      "color": "#f97316",
      "order": 6,
      "lessons": [
        {
          "id": "branching-strategies",
          "title": "Branching Strategies",
          "content": "Learn GitFlow, GitHub Flow, and other branching models. Choose the right strategy for your team and project.",
          "codeExample": "# GitFlow example\ngit flow init\ngit flow feature start new-feature\n# Work on feature\ngit flow feature finish new-feature\n\n# GitHub Flow\ngit checkout -b feature/user-auth\n# Work and commit\ngit push origin feature/user-auth\n# Create PR on GitHub",
          "duration": 10
        },
        {
          "id": "rebasing",
          "title": "Rebasing and History",
          "content": "Keep a clean commit history with rebasing. Learn interactive rebase, squashing, and when to use merge vs rebase.",
          "codeExample": "# Interactive rebase\ngit rebase -i HEAD~3\n\n# Rebase onto main\ngit checkout feature-branch\ngit rebase main\n\n# Squash commits\ngit rebase -i HEAD~3\n# Change 'pick' to 'squash' for commits to combine",
          "duration": 8
        },
        {
          "id": "conflict-resolution",
          "title": "Merge Conflicts",
          "content": "Handle merge conflicts like a pro. Learn conflict resolution strategies and tools to resolve conflicts efficiently.",
          "codeExample": "# When conflicts occur\ngit status\ngit diff\n\n# Resolve conflicts in files\n# Then add and continue\ngit add .\ngit rebase --continue\n\n# Or during merge\ngit add .\ngit commit",
          "duration": 8
        },
        {
          "id": "advanced-commands",
          "title": "Advanced Git Commands",
          "content": "Master powerful Git commands: cherry-pick, bisect, stash, and hooks. Become a Git power user.",
          "codeExample": "# Cherry-pick specific commits\ngit cherry-pick abc123\n\n# Find bugs with bisect\ngit bisect start\ngit bisect bad HEAD\ngit bisect good v1.0\n\n# Stash changes\ngit stash push -m \"WIP: refactoring\"\ngit stash pop\n\n# Git hooks\necho '#!/bin/sh\\nnpm test' > .git/hooks/pre-commit\nchmod +x .git/hooks/pre-commit",
          "duration": 10
        },
        {
          "id": "collaboration",
          "title": "Team Collaboration",
          "content": "Best practices for team Git workflows. Pull requests, code reviews, and maintaining a healthy repository.",
          "codeExample": "# Pull request workflow\ngit checkout main\ngit pull origin main\ngit checkout -b feature/new-feature\n# Make changes and commit\ngit push origin feature/new-feature\n# Create PR on GitHub\n\n# Reviewing changes\ngit fetch origin\ngit checkout pr-branch\ngit diff main..pr-branch",
          "duration": 6
        },
        {
          "id": "git-automation",
          "title": "Git Automation",
          "content": "Automate Git workflows with hooks, GitHub Actions, and semantic versioning. Streamline your development process.",
          "codeExample": "# Semantic versioning\nnpm install -g semantic-release\n\n# GitHub Action for auto-release\nname: Release\non:\n  push:\n    branches: [main]\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - run: npx semantic-release",
          "duration": 8
        }
      ]
    },
    {
      "id": "nodejs-deployment",
      "title": "Node.js Production Deployment",
      "description": "Deploy Node.js applications to production with proper process management, monitoring, and scaling strategies.",
      "category": "DevOps",
      "difficulty": "Advanced",
      "duration": 70,
      "lessonCount": 8,
      "icon": "server",
      "color": "#059669",
      "order": 7,
      "lessons": [
        {
          "id": "production-setup",
          "title": "Production Environment",
          "content": "Set up Node.js for production with proper environment variables, logging, and error handling.",
          "codeExample": "// Production server setup\nconst express = require('express');\nconst helmet = require('helmet');\nconst compression = require('compression');\n\nconst app = express();\n\n// Security and performance middleware\napp.use(helmet());\napp.use(compression());\n\n// Environment configuration\nconst PORT = process.env.PORT || 3000;\nconst NODE_ENV = process.env.NODE_ENV || 'development';\n\napp.listen(PORT, () => {\n  console.log(`Server running on port ${PORT} in ${NODE_ENV} mode`);\n});",
          "duration": 8
        },
        {
          "id": "process-management",
          "title": "Process Management",
          "content": "Keep your Node.js app running with PM2. Learn clustering, auto-restart, and load balancing.",
          "codeExample": "# Install PM2\nnpm install -g pm2\n\n# Start app with PM2\npm2 start app.js --name \"my-app\"\n\n# Cluster mode\npm2 start app.js -i max\n\n# PM2 ecosystem file\n// ecosystem.config.js\nmodule.exports = {\n  apps: [{\n    name: 'my-app',\n    script: './app.js',\n    instances: 'max',\n    env: {\n      NODE_ENV: 'development'\n    },\n    env_production: {\n      NODE_ENV: 'production'\n    }\n  }]\n};",
          "duration": 10
        },
        {
          "id": "docker-deployment",
          "title": "Docker Deployment",
          "content": "Containerize your Node.js app for consistent deployments across environments.",
          "codeExample": "# Multi-stage Dockerfile\nFROM node:18-alpine AS builder\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci --only=production\n\nFROM node:18-alpine AS runtime\nRUN addgroup -g 1001 -S nodejs\nRUN adduser -S nextjs -u 1001\nWORKDIR /app\nCOPY --from=builder /app/node_modules ./node_modules\nCOPY . .\nUSER nextjs\nEXPOSE 3000\nCMD [\"node\", \"server.js\"]",
          "duration": 8
        },
        {
          "id": "database-deployment",
          "title": "Database & Migrations",
          "content": "Handle database connections, migrations, and connection pooling in production environments.",
          "codeExample": "// Database connection with pooling\nconst { Pool } = require('pg');\n\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n  max: 20,\n  idleTimeoutMillis: 30000,\n  connectionTimeoutMillis: 2000,\n});\n\n// Migration runner\nconst migrate = async () => {\n  const client = await pool.connect();\n  try {\n    await client.query('BEGIN');\n    // Run migrations\n    await client.query('COMMIT');\n  } catch (error) {\n    await client.query('ROLLBACK');\n    throw error;\n  } finally {\n    client.release();\n  }\n};",
          "duration": 8
        },
        {
          "id": "monitoring",
          "title": "Monitoring & Logging",
          "content": "Implement comprehensive monitoring with logs, metrics, and health checks for production visibility.",
          "codeExample": "// Structured logging with Winston\nconst winston = require('winston');\n\nconst logger = winston.createLogger({\n  level: 'info',\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.json()\n  ),\n  transports: [\n    new winston.transports.File({ filename: 'error.log', level: 'error' }),\n    new winston.transports.File({ filename: 'combined.log' })\n  ]\n});\n\n// Health check endpoint\napp.get('/health', async (req, res) => {\n  const health = {\n    uptime: process.uptime(),\n    message: 'OK',\n    timestamp: Date.now(),\n    database: await checkDatabase()\n  };\n  res.status(200).json(health);\n});",
          "duration": 10
        },
        {
          "id": "scaling",
          "title": "Scaling Strategies",
          "content": "Scale your Node.js application horizontally and vertically. Learn about load balancing and microservices.",
          "codeExample": "# Horizontal scaling with Docker Swarm\ndocker swarm init\ndocker service create --name web --replicas 3 -p 80:3000 myapp\n\n# Load balancer config (nginx)\nupstream backend {\n    server app1:3000;\n    server app2:3000;\n    server app3:3000;\n}\n\nserver {\n    location / {\n        proxy_pass http://backend;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}",
          "duration": 8
        },
        {
          "id": "security",
          "title": "Production Security",
          "content": "Secure your Node.js app with proper authentication, rate limiting, and security headers.",
          "codeExample": "const rateLimit = require('express-rate-limit');\nconst slowDown = require('express-slow-down');\n\n// Rate limiting\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100 // limit each IP to 100 requests per windowMs\n});\n\n// Speed limiting\nconst speedLimiter = slowDown({\n  windowMs: 15 * 60 * 1000,\n  delayAfter: 2,\n  delayMs: 500\n});\n\napp.use('/api/', limiter);\napp.use('/api/', speedLimiter);\n\n// Security headers\napp.use(helmet({\n  contentSecurityPolicy: {\n    directives: {\n      defaultSrc: [\"'self'\"],\n      styleSrc: [\"'self'\", \"'unsafe-inline'\"]\n    }\n  }\n}));",
          "duration": 8
        },
        {
          "id": "deployment-strategies",
          "title": "Deployment Strategies",
          "content": "Learn blue-green deployments, rolling updates, and canary releases for zero-downtime deployments.",
          "codeExample": "# Blue-Green deployment script\n#!/bin/bash\n\n# Deploy to green environment\ndocker-compose -f docker-compose.green.yml up -d\n\n# Health check\nwhile ! curl -f http://green.example.com/health; do\n    sleep 5\ndone\n\n# Switch traffic\nnginx -s reload\n\n# Stop blue environment\ndocker-compose -f docker-compose.blue.yml down\n\necho \"Deployment completed successfully\"",
          "duration": 10
        }
      ]
    },
    {
      "id": "fastapi-fundamentals",
      "title": "FastAPI Fundamentals",
      "description": "Build high-performance Python APIs with FastAPI. Learn async programming, automatic documentation, and modern API development.",
      "category": "Backend Framework",
      "difficulty": "Intermediate",
      "duration": 72,
      "lessonCount": 8,
      "icon": "fastapi",
      "color": "#009688",
      "order": 12,
      "lessons": [
        {
          "id": "intro",
          "title": "Introduction to FastAPI",
          "content": "FastAPI is a modern, fast web framework for building APIs with Python. It's built on standard Python type hints and provides automatic API documentation.",
          "codeExample": "# Install FastAPI\npip install fastapi uvicorn[standard]\n\n# main.py\nfrom fastapi import FastAPI\n\napp = FastAPI(title=\"My API\", version=\"1.0.0\")\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: str = None):\n    return {\"item_id\": item_id, \"q\": q}\n\n# Run the server\n# uvicorn main:app --reload\n\n# Automatic docs available at:\n# http://localhost:8000/docs (Swagger UI)\n# http://localhost:8000/redoc (ReDoc)",
          "duration": 8
        },
        {
          "id": "pydantic-models",
          "title": "Pydantic Models & Validation",
          "content": "Use Pydantic models for request/response validation and automatic documentation generation.",
          "codeExample": "from pydantic import BaseModel, EmailStr, validator\nfrom typing import Optional, List\nfrom datetime import datetime\n\nclass UserBase(BaseModel):\n    email: EmailStr\n    name: str\n    age: int\n    \n    @validator('age')\n    def validate_age(cls, v):\n        if v < 0 or v > 150:\n            raise ValueError('Age must be between 0 and 150')\n        return v\n\nclass UserCreate(UserBase):\n    password: str\n    \n    @validator('password')\n    def validate_password(cls, v):\n        if len(v) < 8:\n            raise ValueError('Password must be at least 8 characters')\n        return v\n\nclass UserResponse(UserBase):\n    id: int\n    created_at: datetime\n    is_active: bool = True\n    \n    class Config:\n        orm_mode = True\n\nclass UserUpdate(BaseModel):\n    name: Optional[str] = None\n    age: Optional[int] = None\n\n# Using in API endpoints\n@app.post(\"/users/\", response_model=UserResponse)\ndef create_user(user: UserCreate):\n    # Create user logic\n    return UserResponse(\n        id=1,\n        email=user.email,\n        name=user.name,\n        age=user.age,\n        created_at=datetime.now()\n    )\n\n@app.get(\"/users/{user_id}\", response_model=UserResponse)\ndef get_user(user_id: int):\n    # Get user logic\n    pass\n\n@app.put(\"/users/{user_id}\", response_model=UserResponse)\ndef update_user(user_id: int, user: UserUpdate):\n    # Update user logic\n    pass",
          "duration": 10
        },
        {
          "id": "async-programming",
          "title": "Async Programming",
          "content": "Leverage Python's async/await for high-performance concurrent operations and database queries.",
          "codeExample": "import asyncio\nfrom fastapi import FastAPI, HTTPException\nimport httpx\nimport asyncpg\nfrom typing import List\n\napp = FastAPI()\n\n# Async database connection\nasync def get_db_connection():\n    return await asyncpg.connect(\n        \"postgresql://user:password@localhost/dbname\"\n    )\n\n# Async endpoint with database\n@app.get(\"/users/{user_id}\")\nasync def get_user(user_id: int):\n    conn = await get_db_connection()\n    try:\n        user = await conn.fetchrow(\n            \"SELECT * FROM users WHERE id = $1\", user_id\n        )\n        if not user:\n            raise HTTPException(status_code=404, detail=\"User not found\")\n        return dict(user)\n    finally:\n        await conn.close()\n\n# Async external API calls\n@app.get(\"/weather/{city}\")\nasync def get_weather(city: str):\n    async with httpx.AsyncClient() as client:\n        response = await client.get(\n            f\"https://api.openweathermap.org/data/2.5/weather?q={city}\"\n        )\n        return response.json()\n\n# Concurrent operations\n@app.get(\"/user-with-posts/{user_id}\")\nasync def get_user_with_posts(user_id: int):\n    async def get_user():\n        conn = await get_db_connection()\n        try:\n            return await conn.fetchrow(\n                \"SELECT * FROM users WHERE id = $1\", user_id\n            )\n        finally:\n            await conn.close()\n    \n    async def get_posts():\n        conn = await get_db_connection()\n        try:\n            return await conn.fetch(\n                \"SELECT * FROM posts WHERE user_id = $1\", user_id\n            )\n        finally:\n            await conn.close()\n    \n    # Run concurrently\n    user, posts = await asyncio.gather(\n        get_user(),\n        get_posts()\n    )\n    \n    return {\n        \"user\": dict(user) if user else None,\n        \"posts\": [dict(post) for post in posts]\n    }",
          "duration": 12
        },
        {
          "id": "database-integration",
          "title": "Database Integration",
          "content": "Integrate FastAPI with databases using SQLAlchemy ORM and async database operations.",
          "codeExample": "# requirements.txt\n# fastapi\n# uvicorn[standard]\n# sqlalchemy\n# asyncpg\n# alembic\n\n# database.py\nfrom sqlalchemy.ext.asyncio import AsyncSession, create_async_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\nfrom sqlalchemy import Column, Integer, String, DateTime, Boolean\nfrom datetime import datetime\n\nDATABASE_URL = \"postgresql+asyncpg://user:password@localhost/dbname\"\n\nengine = create_async_engine(DATABASE_URL)\nAsyncSessionLocal = sessionmaker(\n    engine, class_=AsyncSession, expire_on_commit=False\n)\n\nBase = declarative_base()\n\nclass User(Base):\n    __tablename__ = \"users\"\n    \n    id = Column(Integer, primary_key=True, index=True)\n    email = Column(String, unique=True, index=True)\n    name = Column(String)\n    hashed_password = Column(String)\n    is_active = Column(Boolean, default=True)\n    created_at = Column(DateTime, default=datetime.utcnow)\n\n# Dependency for database session\nasync def get_db():\n    async with AsyncSessionLocal() as session:\n        try:\n            yield session\n        finally:\n            await session.close()\n\n# CRUD operations\nfrom sqlalchemy.ext.asyncio import AsyncSession\nfrom sqlalchemy import select\nfrom fastapi import Depends\n\n@app.post(\"/users/\", response_model=UserResponse)\nasync def create_user(\n    user: UserCreate, \n    db: AsyncSession = Depends(get_db)\n):\n    db_user = User(\n        email=user.email,\n        name=user.name,\n        hashed_password=hash_password(user.password)\n    )\n    db.add(db_user)\n    await db.commit()\n    await db.refresh(db_user)\n    return db_user\n\n@app.get(\"/users/{user_id}\", response_model=UserResponse)\nasync def get_user(\n    user_id: int, \n    db: AsyncSession = Depends(get_db)\n):\n    result = await db.execute(\n        select(User).where(User.id == user_id)\n    )\n    user = result.scalar_one_or_none()\n    if not user:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return user",
          "duration": 12
        },
        {
          "id": "authentication",
          "title": "Authentication & Security",
          "content": "Implement JWT authentication, OAuth2, and security best practices in FastAPI applications.",
          "codeExample": "from fastapi import FastAPI, Depends, HTTPException, status\nfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom datetime import datetime, timedelta\nfrom typing import Optional\n\n# Security setup\nSECRET_KEY = \"your-secret-key\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = FastAPI()\n\n# Token models\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\nclass TokenData(BaseModel):\n    username: Optional[str] = None\n\n# Password hashing\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n# JWT token functions\ndef create_access_token(data: dict, expires_delta: Optional[timedelta] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.utcnow() + expires_delta\n    else:\n        expire = datetime.utcnow() + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n# Authentication dependency\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except JWTError:\n        raise credentials_exception\n    \n    user = await get_user_by_username(username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n# Login endpoint\n@app.post(\"/token\", response_model=Token)\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user = await authenticate_user(form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return {\"access_token\": access_token, \"token_type\": \"bearer\"}\n\n# Protected endpoint\n@app.get(\"/users/me\", response_model=UserResponse)\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n\n# Role-based access control\nfrom enum import Enum\n\nclass UserRole(str, Enum):\n    admin = \"admin\"\n    user = \"user\"\n    moderator = \"moderator\"\n\ndef require_role(role: UserRole):\n    def role_checker(current_user: User = Depends(get_current_user)):\n        if current_user.role != role:\n            raise HTTPException(\n                status_code=status.HTTP_403_FORBIDDEN,\n                detail=\"Not enough permissions\"\n            )\n        return current_user\n    return role_checker\n\n@app.delete(\"/users/{user_id}\")\nasync def delete_user(\n    user_id: int,\n    current_user: User = Depends(require_role(UserRole.admin))\n):\n    # Only admins can delete users\n    pass",
          "duration": 10
        },
        {
          "id": "middleware-cors",
          "title": "Middleware & CORS",
          "content": "Implement custom middleware, CORS handling, and request/response processing in FastAPI.",
          "codeExample": "from fastapi import FastAPI, Request, Response\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom fastapi.middleware.trustedhost import TrustedHostMiddleware\nfrom starlette.middleware.base import BaseHTTPMiddleware\nimport time\nimport logging\n\napp = FastAPI()\n\n# CORS middleware\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"http://localhost:3000\", \"https://myapp.com\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n# Trusted host middleware\napp.add_middleware(\n    TrustedHostMiddleware, \n    allowed_hosts=[\"example.com\", \"*.example.com\"]\n)\n\n# Custom logging middleware\nclass LoggingMiddleware(BaseHTTPMiddleware):\n    async def dispatch(self, request: Request, call_next):\n        start_time = time.time()\n        \n        # Log request\n        logging.info(f\"Request: {request.method} {request.url}\")\n        \n        response = await call_next(request)\n        \n        # Log response\n        process_time = time.time() - start_time\n        logging.info(\n            f\"Response: {response.status_code} - {process_time:.4f}s\"\n        )\n        \n        response.headers[\"X-Process-Time\"] = str(process_time)\n        return response\n\napp.add_middleware(LoggingMiddleware)\n\n# Rate limiting middleware\nfrom collections import defaultdict\nfrom datetime import datetime, timedelta\n\nclass RateLimitMiddleware(BaseHTTPMiddleware):\n    def __init__(self, app, max_requests: int = 100, window_seconds: int = 60):\n        super().__init__(app)\n        self.max_requests = max_requests\n        self.window_seconds = window_seconds\n        self.requests = defaultdict(list)\n    \n    async def dispatch(self, request: Request, call_next):\n        client_ip = request.client.host\n        now = datetime.now()\n        \n        # Clean old requests\n        cutoff = now - timedelta(seconds=self.window_seconds)\n        self.requests[client_ip] = [\n            req_time for req_time in self.requests[client_ip]\n            if req_time > cutoff\n        ]\n        \n        # Check rate limit\n        if len(self.requests[client_ip]) >= self.max_requests:\n            return Response(\n                content=\"Rate limit exceeded\",\n                status_code=429\n            )\n        \n        # Add current request\n        self.requests[client_ip].append(now)\n        \n        response = await call_next(request)\n        return response\n\napp.add_middleware(RateLimitMiddleware, max_requests=100, window_seconds=60)\n\n# Error handling middleware\nfrom fastapi import HTTPException\nfrom fastapi.responses import JSONResponse\n\n@app.exception_handler(HTTPException)\nasync def http_exception_handler(request: Request, exc: HTTPException):\n    return JSONResponse(\n        status_code=exc.status_code,\n        content={\n            \"error\": exc.detail,\n            \"status_code\": exc.status_code,\n            \"path\": str(request.url)\n        }\n    )\n\n@app.exception_handler(Exception)\nasync def general_exception_handler(request: Request, exc: Exception):\n    logging.error(f\"Unhandled exception: {exc}\")\n    return JSONResponse(\n        status_code=500,\n        content={\n            \"error\": \"Internal server error\",\n            \"status_code\": 500\n        }\n    )",
          "duration": 8
        },
        {
          "id": "testing",
          "title": "Testing FastAPI Apps",
          "content": "Write comprehensive tests for FastAPI applications using pytest and TestClient.",
          "codeExample": "# requirements-dev.txt\n# pytest\n# pytest-asyncio\n# httpx\n\n# test_main.py\nimport pytest\nfrom fastapi.testclient import TestClient\nfrom sqlalchemy.ext.asyncio import AsyncSession, create_async_engine\nfrom sqlalchemy.pool import StaticPool\nfrom main import app, get_db\nfrom database import Base\n\n# Test database setup\nSQLALCHEMY_DATABASE_URL = \"sqlite+aiosqlite:///./test.db\"\n\nengine = create_async_engine(\n    SQLALCHEMY_DATABASE_URL,\n    connect_args={\"check_same_thread\": False},\n    poolclass=StaticPool,\n)\n\n@pytest.fixture\nasync def test_db():\n    async with engine.begin() as conn:\n        await conn.run_sync(Base.metadata.create_all)\n    \n    async with AsyncSession(engine) as session:\n        yield session\n    \n    async with engine.begin() as conn:\n        await conn.run_sync(Base.metadata.drop_all)\n\n@pytest.fixture\ndef client(test_db):\n    def override_get_db():\n        try:\n            yield test_db\n        finally:\n            pass\n    \n    app.dependency_overrides[get_db] = override_get_db\n    with TestClient(app) as c:\n        yield c\n    app.dependency_overrides.clear()\n\n# Test cases\ndef test_read_root(client):\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"Hello\": \"World\"}\n\ndef test_create_user(client):\n    user_data = {\n        \"email\": \"test@example.com\",\n        \"name\": \"Test User\",\n        \"password\": \"testpassword123\"\n    }\n    response = client.post(\"/users/\", json=user_data)\n    assert response.status_code == 201\n    data = response.json()\n    assert data[\"email\"] == user_data[\"email\"]\n    assert data[\"name\"] == user_data[\"name\"]\n    assert \"id\" in data\n    assert \"password\" not in data\n\ndef test_get_user(client):\n    # Create user first\n    user_data = {\n        \"email\": \"test@example.com\",\n        \"name\": \"Test User\",\n        \"password\": \"testpassword123\"\n    }\n    create_response = client.post(\"/users/\", json=user_data)\n    user_id = create_response.json()[\"id\"]\n    \n    # Get user\n    response = client.get(f\"/users/{user_id}\")\n    assert response.status_code == 200\n    data = response.json()\n    assert data[\"email\"] == user_data[\"email\"]\n\ndef test_user_not_found(client):\n    response = client.get(\"/users/999\")\n    assert response.status_code == 404\n    assert \"not found\" in response.json()[\"detail\"].lower()\n\ndef test_invalid_user_data(client):\n    user_data = {\n        \"email\": \"invalid-email\",\n        \"name\": \"\",\n        \"password\": \"123\"  # Too short\n    }\n    response = client.post(\"/users/\", json=user_data)\n    assert response.status_code == 422\n\n# Authentication tests\ndef test_login(client):\n    # Create user first\n    user_data = {\n        \"email\": \"test@example.com\",\n        \"name\": \"Test User\",\n        \"password\": \"testpassword123\"\n    }\n    client.post(\"/users/\", json=user_data)\n    \n    # Login\n    login_data = {\n        \"username\": \"test@example.com\",\n        \"password\": \"testpassword123\"\n    }\n    response = client.post(\"/token\", data=login_data)\n    assert response.status_code == 200\n    data = response.json()\n    assert \"access_token\" in data\n    assert data[\"token_type\"] == \"bearer\"\n\ndef test_protected_endpoint(client):\n    # Test without token\n    response = client.get(\"/users/me\")\n    assert response.status_code == 401\n    \n    # Create user and login\n    user_data = {\n        \"email\": \"test@example.com\",\n        \"name\": \"Test User\",\n        \"password\": \"testpassword123\"\n    }\n    client.post(\"/users/\", json=user_data)\n    \n    login_data = {\n        \"username\": \"test@example.com\",\n        \"password\": \"testpassword123\"\n    }\n    token_response = client.post(\"/token\", data=login_data)\n    token = token_response.json()[\"access_token\"]\n    \n    # Test with token\n    headers = {\"Authorization\": f\"Bearer {token}\"}\n    response = client.get(\"/users/me\", headers=headers)\n    assert response.status_code == 200\n    data = response.json()\n    assert data[\"email\"] == user_data[\"email\"]\n\n# Async test example\n@pytest.mark.asyncio\nasync def test_async_endpoint():\n    # Test async functions directly\n    result = await some_async_function()\n    assert result is not None",
          "duration": 10
        },
        {
          "id": "deployment",
          "title": "Deployment & Production",
          "content": "Deploy FastAPI applications with Docker, configure production settings, and implement monitoring.",
          "codeExample": "# Dockerfile\nFROM python:3.11-slim\n\nWORKDIR /app\n\n# Install system dependencies\nRUN apt-get update && apt-get install -y \\\n    gcc \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Copy requirements and install Python dependencies\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy application code\nCOPY . .\n\n# Create non-root user\nRUN useradd --create-home --shell /bin/bash app \\\n    && chown -R app:app /app\nUSER app\n\nEXPOSE 8000\n\n# Production command\nCMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n\n# docker-compose.yml\nversion: '3.8'\n\nservices:\n  web:\n    build: .\n    ports:\n      - \"8000:8000\"\n    environment:\n      - DATABASE_URL=postgresql://user:password@db:5432/mydb\n      - REDIS_URL=redis://redis:6379\n    depends_on:\n      - db\n      - redis\n    volumes:\n      - ./logs:/app/logs\n    restart: unless-stopped\n\n  db:\n    image: postgres:15\n    environment:\n      - POSTGRES_DB=mydb\n      - POSTGRES_USER=user\n      - POSTGRES_PASSWORD=password\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    restart: unless-stopped\n\n  redis:\n    image: redis:7-alpine\n    restart: unless-stopped\n\n  nginx:\n    image: nginx:alpine\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./nginx.conf:/etc/nginx/nginx.conf\n      - ./ssl:/etc/nginx/ssl\n    depends_on:\n      - web\n    restart: unless-stopped\n\nvolumes:\n  postgres_data:\n\n# Production settings\n# config.py\nimport os\nfrom functools import lru_cache\nfrom pydantic import BaseSettings\n\nclass Settings(BaseSettings):\n    app_name: str = \"My FastAPI App\"\n    debug: bool = False\n    database_url: str\n    secret_key: str\n    redis_url: str = \"redis://localhost:6379\"\n    \n    # Security\n    cors_origins: list = [\"https://myapp.com\"]\n    \n    # Logging\n    log_level: str = \"INFO\"\n    \n    class Config:\n        env_file = \".env\"\n\n@lru_cache()\ndef get_settings():\n    return Settings()\n\n# main.py production setup\nfrom config import get_settings\nimport logging\n\nsettings = get_settings()\n\n# Logging configuration\nlogging.basicConfig(\n    level=getattr(logging, settings.log_level),\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n)\n\napp = FastAPI(\n    title=settings.app_name,\n    debug=settings.debug,\n    docs_url=\"/docs\" if settings.debug else None,\n    redoc_url=\"/redoc\" if settings.debug else None\n)\n\n# Health check endpoint\n@app.get(\"/health\")\nasync def health_check():\n    return {\n        \"status\": \"healthy\",\n        \"timestamp\": datetime.utcnow().isoformat()\n    }\n\n# nginx.conf\nevents {\n    worker_connections 1024;\n}\n\nhttp {\n    upstream app {\n        server web:8000;\n    }\n    \n    server {\n        listen 80;\n        server_name myapi.com;\n        \n        location / {\n            proxy_pass http://app;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n        }\n    }\n}\n\n# Deployment script\n# deploy.sh\n#!/bin/bash\nset -e\n\necho \"Starting deployment...\"\n\n# Pull latest code\ngit pull origin main\n\n# Build and start containers\ndocker-compose down\ndocker-compose build\ndocker-compose up -d\n\n# Run migrations\ndocker-compose exec web alembic upgrade head\n\n# Health check\nsleep 10\nif curl -f http://localhost:8000/health; then\n    echo \"Deployment successful!\"\nelse\n    echo \"Deployment failed!\"\n    exit 1\nfi",
          "duration": 12
        }
      ]
    },
    {
      "id": "django-fundamentals",
      "title": "Django REST Framework",
      "description": "Build robust APIs with Django REST Framework. Master serializers, viewsets, authentication, and advanced API patterns.",
      "category": "Backend Framework",
      "difficulty": "Intermediate",
      "duration": 85,
      "lessonCount": 9,
      "icon": "django",
      "color": "#092e20",
      "order": 13,
      "lessons": [
        {
          "id": "intro",
          "title": "Django & DRF Setup",
          "content": "Set up Django with Django REST Framework for building powerful APIs. Learn project structure and basic configuration.",
          "codeExample": "# Install Django and DRF\npip install django djangorestframework\npip install django-cors-headers python-decouple\n\n# Create project\ndjango-admin startproject myapi\ncd myapi\npython manage.py startapp api\n\n# settings.py\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',\n    'corsheaders',\n    'api',\n]\n\nMIDDLEWARE = [\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.TokenAuthentication',\n        'rest_framework.authentication.SessionAuthentication',\n    ],\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.IsAuthenticated',\n    ],\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n    'PAGE_SIZE': 20\n}\n\n# CORS settings\nCORS_ALLOWED_ORIGINS = [\n    \"http://localhost:3000\",\n    \"http://127.0.0.1:3000\",\n]\n\n# Database\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'myapi_db',\n        'USER': 'postgres',\n        'PASSWORD': 'password',\n        'HOST': 'localhost',\n        'PORT': '5432',\n    }\n}\n\n# Run migrations\npython manage.py makemigrations\npython manage.py migrate\npython manage.py createsuperuser",
          "duration": 10
        }
      ]
    },
    {
      "id": "spring-boot-fundamentals",
      "title": "Spring Boot & REST APIs",
      "description": "Build enterprise Java applications with Spring Boot. Learn dependency injection, REST APIs, security, and microservices architecture.",
      "category": "Backend Framework", 
      "difficulty": "Intermediate",
      "duration": 88,
      "lessonCount": 9,
      "icon": "spring",
      "color": "#6db33f",
      "order": 14,
      "lessons": [
        {
          "id": "intro",
          "title": "Spring Boot Introduction",
          "content": "Spring Boot simplifies Spring application development with auto-configuration, embedded servers, and production-ready features.",
          "codeExample": "// Maven dependency in pom.xml\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-data-jpa</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>com.h2database</groupId>\n        <artifactId>h2</artifactId>\n        <scope>runtime</scope>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-test</artifactId>\n        <scope>test</scope>\n    </dependency>\n</dependencies>\n\n// Main Application Class\n@SpringBootApplication\npublic class ApiApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(ApiApplication.class, args);\n    }\n}\n\n// Simple REST Controller\n@RestController\n@RequestMapping(\"/api\")\npublic class HelloController {\n    \n    @GetMapping(\"/hello\")\n    public Map<String, String> hello() {\n        Map<String, String> response = new HashMap<>();\n        response.put(\"message\", \"Hello, Spring Boot!\");\n        response.put(\"timestamp\", LocalDateTime.now().toString());\n        return response;\n    }\n    \n    @GetMapping(\"/hello/{name}\")\n    public ResponseEntity<String> helloName(@PathVariable String name) {\n        return ResponseEntity.ok(\"Hello, \" + name + \"!\");\n    }\n}\n\n// application.properties\nserver.port=8080\nspring.application.name=my-api\nspring.datasource.url=jdbc:h2:mem:testdb\nspring.jpa.show-sql=true\nspring.h2.console.enabled=true\n\n// Run the application\n// mvn spring-boot:run\n// Access H2 console: http://localhost:8080/h2-console",
          "duration": 10
        }
      ]
    },
    {
      "id": "laravel-fundamentals",
      "title": "Laravel APIs & Eloquent",
      "description": "Build modern PHP APIs with Laravel. Master Eloquent ORM, authentication, middleware, and RESTful API development.",
      "category": "Backend Framework",
      "difficulty": "Intermediate",
      "duration": 76,
      "lessonCount": 8,
      "icon": "laravel",
      "color": "#ff2d20",
      "order": 15,
      "lessons": [
        {
          "id": "intro",
          "title": "Laravel Setup & Basics",
          "content": "Install Laravel and understand its MVC architecture, Artisan CLI, and basic routing for API development.",
          "codeExample": "# Install Laravel via Composer\ncomposer global require laravel/installer\nlaravel new my-api\ncd my-api\n\n# Or via Composer create-project\ncomposer create-project laravel/laravel my-api\n\n# Install API dependencies\ncomposer require laravel/sanctum\nphp artisan vendor:publish --provider=\"Laravel\\Sanctum\\SanctumServiceProvider\"\nphp artisan migrate\n\n// Basic API routes in routes/api.php\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Route;\n\nRoute::get('/health', function () {\n    return response()->json([\n        'status' => 'healthy',\n        'timestamp' => now(),\n        'version' => '1.0.0'\n    ]);\n});\n\nRoute::middleware('auth:sanctum')->get('/user', function (Request $request) {\n    return $request->user();\n});\n\n// Simple API controller\nphp artisan make:controller Api/UserController --api\n\n// app/Http/Controllers/Api/UserController.php\n<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Http\\Controllers\\Controller;\nuse App\\Models\\User;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\JsonResponse;\n\nclass UserController extends Controller\n{\n    public function index(): JsonResponse\n    {\n        $users = User::paginate(15);\n        return response()->json($users);\n    }\n    \n    public function show(User $user): JsonResponse\n    {\n        return response()->json($user);\n    }\n    \n    public function store(Request $request): JsonResponse\n    {\n        $validated = $request->validate([\n            'name' => 'required|string|max:255',\n            'email' => 'required|email|unique:users',\n            'password' => 'required|string|min:8'\n        ]);\n        \n        $validated['password'] = bcrypt($validated['password']);\n        $user = User::create($validated);\n        \n        return response()->json($user, 201);\n    }\n}\n\n// Register routes\nRoute::apiResource('users', App\\Http\\Controllers\\Api\\UserController::class);\n\n// Start development server\nphp artisan serve\n// Access API: http://localhost:8000/api/users",
          "duration": 8
        }
      ]
    },
    {
      "id": "rails-api-fundamentals", 
      "title": "Ruby on Rails API",
      "description": "Build scalable APIs with Ruby on Rails. Learn Active Record, serializers, authentication, and API-only applications.",
      "category": "Backend Framework",
      "difficulty": "Intermediate", 
      "duration": 82,
      "lessonCount": 8,
      "icon": "rails",
      "color": "#cc0000",
      "order": 16,
      "lessons": [
        {
          "id": "intro",
          "title": "Rails API Setup",
          "content": "Create API-only Rails applications with optimized middleware stack and JSON responses.",
          "codeExample": "# Install Rails (Ruby 3.0+ required)\ngem install rails\n\n# Create API-only Rails app\nrails new my_api --api --database=postgresql\ncd my_api\n\n# Gemfile additions for API development\n# Add to Gemfile:\ngem 'rack-cors'\ngem 'jwt'\ngem 'bcrypt'\ngem 'active_model_serializers'\n\nbundle install\n\n# Configure CORS in config/initializers/cors.rb\nRails.application.config.middleware.insert_before 0, Rack::Cors do\n  allow do\n    origins 'localhost:3000', 'example.com'\n    \n    resource '*',\n      headers: :any,\n      methods: [:get, :post, :put, :patch, :delete, :options, :head],\n      credentials: true\n  end\nend\n\n# Basic API controller\n# app/controllers/api/v1/base_controller.rb\nclass Api::V1::BaseController < ApplicationController\n  protect_from_forgery with: :null_session\n  \n  private\n  \n  def render_json_response(data, status = :ok)\n    render json: data, status: status\n  end\n  \n  def render_error(message, status = :unprocessable_entity)\n    render json: { error: message }, status: status\n  end\nend\n\n# Health check controller\n# app/controllers/api/v1/health_controller.rb\nclass Api::V1::HealthController < Api::V1::BaseController\n  def show\n    render_json_response({\n      status: 'healthy',\n      timestamp: Time.current,\n      version: '1.0.0',\n      database: database_status\n    })\n  end\n  \n  private\n  \n  def database_status\n    ActiveRecord::Base.connection.active? ? 'connected' : 'disconnected'\n  rescue\n    'error'\n  end\nend\n\n# Routes configuration\n# config/routes.rb\nRails.application.routes.draw do\n  namespace :api do\n    namespace :v1 do\n      get 'health', to: 'health#show'\n      resources :users, except: [:new, :edit]\n    end\n  end\nend\n\n# User model\n# rails generate model User name:string email:string password_digest:string\n# app/models/user.rb\nclass User < ApplicationRecord\n  has_secure_password\n  \n  validates :name, presence: true, length: { minimum: 2 }\n  validates :email, presence: true, uniqueness: true, format: { with: URI::MailTo::EMAIL_REGEXP }\n  validates :password, length: { minimum: 6 }, if: -> { new_record? || !password.nil? }\n  \n  scope :active, -> { where(active: true) }\n  \n  def as_json(options = {})\n    super(options.merge(except: [:password_digest, :created_at, :updated_at]))\n  end\nend\n\n# Run migrations\nrails db:create\nrails db:migrate\n\n# Start server\nrails server\n# Access API: http://localhost:3000/api/v1/health",
          "duration": 10
        }
      ]
    },
    {
      "id": "django-fundamentals",
      "title": "Django REST Framework",
      "description": "Build robust APIs with Django REST Framework. Master serializers, viewsets, authentication, and advanced API patterns.",
      "category": "Backend Framework",
      "difficulty": "Intermediate",
      "duration": 85,
      "lessonCount": 9,
      "icon": "django",
      "color": "#092e20",
      "order": 13,
      "lessons": [
        {
          "id": "intro",
          "title": "Django & DRF Setup",
          "content": "Set up Django with Django REST Framework for building powerful APIs. Learn project structure and basic configuration.",
          "codeExample": "# Install Django and DRF\npip install django djangorestframework\npip install django-cors-headers python-decouple\n\n# Create project\ndjango-admin startproject myapi\ncd myapi\npython manage.py startapp api\n\n# settings.py\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',\n    'corsheaders',\n    'api',\n]\n\nMIDDLEWARE = [\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.TokenAuthentication',\n        'rest_framework.authentication.SessionAuthentication',\n    ],\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.IsAuthenticated',\n    ],\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n    'PAGE_SIZE': 20\n}\n\n# CORS settings\nCORS_ALLOWED_ORIGINS = [\n    \"http://localhost:3000\",\n    \"http://127.0.0.1:3000\",\n]\n\n# Database\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'myapi_db',\n        'USER': 'postgres',\n        'PASSWORD': 'password',\n        'HOST': 'localhost',\n        'PORT': '5432',\n    }\n}\n\n# Run migrations\npython manage.py makemigrations\npython manage.py migrate\npython manage.py createsuperuser",
          "duration": 10
        },
        {
          "id": "models-serializers",
          "title": "Models & Serializers",
          "content": "Create Django models and DRF serializers for data validation and API responses.",
          "codeExample": "# models.py\nfrom django.db import models\nfrom django.contrib.auth.models import User\n\nclass Category(models.Model):\n    name = models.CharField(max_length=100, unique=True)\n    description = models.TextField(blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    \n    class Meta:\n        verbose_name_plural = \"categories\"\n    \n    def __str__(self):\n        return self.name\n\nclass Post(models.Model):\n    STATUS_CHOICES = [\n        ('draft', 'Draft'),\n        ('published', 'Published'),\n        ('archived', 'Archived'),\n    ]\n    \n    title = models.CharField(max_length=200)\n    slug = models.SlugField(unique=True)\n    content = models.TextField()\n    author = models.ForeignKey(User, on_delete=models.CASCADE, related_name='posts')\n    category = models.ForeignKey(Category, on_delete=models.SET_NULL, null=True)\n    tags = models.ManyToManyField('Tag', blank=True)\n    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default='draft')\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    published_at = models.DateTimeField(null=True, blank=True)\n    \n    class Meta:\n        ordering = ['-created_at']\n    \n    def __str__(self):\n        return self.title\n\nclass Tag(models.Model):\n    name = models.CharField(max_length=50, unique=True)\n    \n    def __str__(self):\n        return self.name\n\nclass Comment(models.Model):\n    post = models.ForeignKey(Post, on_delete=models.CASCADE, related_name='comments')\n    author = models.ForeignKey(User, on_delete=models.CASCADE)\n    content = models.TextField()\n    parent = models.ForeignKey('self', on_delete=models.CASCADE, null=True, blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    is_approved = models.BooleanField(default=False)\n    \n    class Meta:\n        ordering = ['created_at']\n    \n    def __str__(self):\n        return f'Comment by {self.author.username} on {self.post.title}'\n\n# serializers.py\nfrom rest_framework import serializers\nfrom django.contrib.auth.models import User\nfrom .models import Post, Category, Tag, Comment\n\nclass UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = ['id', 'username', 'email', 'first_name', 'last_name']\n        read_only_fields = ['id']\n\nclass TagSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Tag\n        fields = ['id', 'name']\n\nclass CategorySerializer(serializers.ModelSerializer):\n    posts_count = serializers.SerializerMethodField()\n    \n    class Meta:\n        model = Category\n        fields = ['id', 'name', 'description', 'created_at', 'posts_count']\n        read_only_fields = ['id', 'created_at']\n    \n    def get_posts_count(self, obj):\n        return obj.post_set.filter(status='published').count()\n\nclass CommentSerializer(serializers.ModelSerializer):\n    author = UserSerializer(read_only=True)\n    replies = serializers.SerializerMethodField()\n    \n    class Meta:\n        model = Comment\n        fields = ['id', 'content', 'author', 'created_at', 'parent', 'replies']\n        read_only_fields = ['id', 'created_at', 'author']\n    \n    def get_replies(self, obj):\n        if obj.comment_set.exists():\n            return CommentSerializer(obj.comment_set.all(), many=True).data\n        return []\n\nclass PostSerializer(serializers.ModelSerializer):\n    author = UserSerializer(read_only=True)\n    category = CategorySerializer(read_only=True)\n    category_id = serializers.IntegerField(write_only=True)\n    tags = TagSerializer(many=True, read_only=True)\n    tag_ids = serializers.ListField(\n        child=serializers.IntegerField(),\n        write_only=True,\n        required=False\n    )\n    comments_count = serializers.SerializerMethodField()\n    \n    class Meta:\n        model = Post\n        fields = [\n            'id', 'title', 'slug', 'content', 'author', 'category', 'category_id',\n            'tags', 'tag_ids', 'status', 'created_at', 'updated_at', 'published_at',\n            'comments_count'\n        ]\n        read_only_fields = ['id', 'created_at', 'updated_at', 'author']\n    \n    def get_comments_count(self, obj):\n        return obj.comments.filter(is_approved=True).count()\n    \n    def create(self, validated_data):\n        tag_ids = validated_data.pop('tag_ids', [])\n        post = Post.objects.create(**validated_data)\n        post.tags.set(tag_ids)\n        return post\n    \n    def update(self, instance, validated_data):\n        tag_ids = validated_data.pop('tag_ids', None)\n        for attr, value in validated_data.items():\n            setattr(instance, attr, value)\n        instance.save()\n        \n        if tag_ids is not None:\n            instance.tags.set(tag_ids)\n        \n        return instance\n\n# Custom validation\nclass PostCreateSerializer(PostSerializer):\n    def validate_title(self, value):\n        if len(value) < 5:\n            raise serializers.ValidationError(\"Title must be at least 5 characters long.\")\n        return value\n    \n    def validate(self, data):\n        if data['status'] == 'published' and not data.get('category_id'):\n            raise serializers.ValidationError(\"Published posts must have a category.\")\n        return data",
          "duration": 12
        },
        {
          "id": "viewsets-urls",
          "title": "ViewSets & URL Configuration",
          "content": "Create ViewSets for CRUD operations and configure URL routing with DRF routers.",
          "codeExample": "# views.py\nfrom rest_framework import viewsets, status, filters\nfrom rest_framework.decorators import action\nfrom rest_framework.response import Response\nfrom rest_framework.permissions import IsAuthenticated, IsAuthenticatedOrReadOnly\nfrom django_filters.rest_framework import DjangoFilterBackend\nfrom django.utils import timezone\nfrom .models import Post, Category, Tag, Comment\nfrom .serializers import (\n    PostSerializer, PostCreateSerializer, CategorySerializer,\n    TagSerializer, CommentSerializer\n)\nfrom .permissions import IsAuthorOrReadOnly\n\nclass CategoryViewSet(viewsets.ModelViewSet):\n    queryset = Category.objects.all()\n    serializer_class = CategorySerializer\n    permission_classes = [IsAuthenticatedOrReadOnly]\n    filter_backends = [filters.SearchFilter, filters.OrderingFilter]\n    search_fields = ['name', 'description']\n    ordering_fields = ['name', 'created_at']\n    ordering = ['name']\n    \n    @action(detail=True, methods=['get'])\n    def posts(self, request, pk=None):\n        \"\"\"Get all posts in this category\"\"\"\n        category = self.get_object()\n        posts = Post.objects.filter(category=category, status='published')\n        serializer = PostSerializer(posts, many=True, context={'request': request})\n        return Response(serializer.data)\n\nclass TagViewSet(viewsets.ModelViewSet):\n    queryset = Tag.objects.all()\n    serializer_class = TagSerializer\n    permission_classes = [IsAuthenticatedOrReadOnly]\n    filter_backends = [filters.SearchFilter]\n    search_fields = ['name']\n\nclass PostViewSet(viewsets.ModelViewSet):\n    queryset = Post.objects.select_related('author', 'category').prefetch_related('tags')\n    permission_classes = [IsAuthenticatedOrReadOnly, IsAuthorOrReadOnly]\n    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]\n    filterset_fields = ['status', 'category', 'tags']\n    search_fields = ['title', 'content']\n    ordering_fields = ['created_at', 'updated_at', 'published_at']\n    ordering = ['-created_at']\n    \n    def get_serializer_class(self):\n        if self.action in ['create', 'update', 'partial_update']:\n            return PostCreateSerializer\n        return PostSerializer\n    \n    def get_queryset(self):\n        queryset = super().get_queryset()\n        # Filter by status for non-authenticated users\n        if not self.request.user.is_authenticated:\n            queryset = queryset.filter(status='published')\n        return queryset\n    \n    def perform_create(self, serializer):\n        serializer.save(author=self.request.user)\n    \n    @action(detail=True, methods=['post'])\n    def publish(self, request, pk=None):\n        \"\"\"Publish a draft post\"\"\"\n        post = self.get_object()\n        if post.status != 'draft':\n            return Response(\n                {'error': 'Only draft posts can be published'},\n                status=status.HTTP_400_BAD_REQUEST\n            )\n        \n        post.status = 'published'\n        post.published_at = timezone.now()\n        post.save()\n        \n        serializer = self.get_serializer(post)\n        return Response(serializer.data)\n    \n    @action(detail=True, methods=['get'])\n    def comments(self, request, pk=None):\n        \"\"\"Get all comments for this post\"\"\"\n        post = self.get_object()\n        comments = Comment.objects.filter(\n            post=post, \n            is_approved=True,\n            parent=None  # Only top-level comments\n        )\n        serializer = CommentSerializer(comments, many=True, context={'request': request})\n        return Response(serializer.data)\n    \n    @action(detail=False, methods=['get'])\n    def my_posts(self, request):\n        \"\"\"Get current user's posts\"\"\"\n        if not request.user.is_authenticated:\n            return Response(\n                {'error': 'Authentication required'},\n                status=status.HTTP_401_UNAUTHORIZED\n            )\n        \n        posts = self.get_queryset().filter(author=request.user)\n        page = self.paginate_queryset(posts)\n        if page is not None:\n            serializer = self.get_serializer(page, many=True)\n            return self.get_paginated_response(serializer.data)\n        \n        serializer = self.get_serializer(posts, many=True)\n        return Response(serializer.data)\n\nclass CommentViewSet(viewsets.ModelViewSet):\n    queryset = Comment.objects.select_related('author', 'post')\n    serializer_class = CommentSerializer\n    permission_classes = [IsAuthenticated]\n    filter_backends = [DjangoFilterBackend, filters.OrderingFilter]\n    filterset_fields = ['post', 'is_approved']\n    ordering = ['created_at']\n    \n    def get_queryset(self):\n        queryset = super().get_queryset()\n        # Regular users can only see approved comments\n        if not self.request.user.is_staff:\n            queryset = queryset.filter(is_approved=True)\n        return queryset\n    \n    def perform_create(self, serializer):\n        serializer.save(author=self.request.user)\n    \n    @action(detail=True, methods=['post'])\n    def approve(self, request, pk=None):\n        \"\"\"Approve a comment (staff only)\"\"\"\n        if not request.user.is_staff:\n            return Response(\n                {'error': 'Staff permission required'},\n                status=status.HTTP_403_FORBIDDEN\n            )\n        \n        comment = self.get_object()\n        comment.is_approved = True\n        comment.save()\n        \n        serializer = self.get_serializer(comment)\n        return Response(serializer.data)\n\n# permissions.py\nfrom rest_framework import permissions\n\nclass IsAuthorOrReadOnly(permissions.BasePermission):\n    \"\"\"\n    Custom permission to only allow authors to edit their own posts.\n    \"\"\"\n    \n    def has_object_permission(self, request, view, obj):\n        # Read permissions for any request\n        if request.method in permissions.SAFE_METHODS:\n            return True\n        \n        # Write permissions only for the author\n        return obj.author == request.user\n\nclass IsOwnerOrReadOnly(permissions.BasePermission):\n    \"\"\"\n    Custom permission to only allow owners to edit their own objects.\n    \"\"\"\n    \n    def has_object_permission(self, request, view, obj):\n        if request.method in permissions.SAFE_METHODS:\n            return True\n        \n        # Check if object has an 'author' or 'user' attribute\n        owner = getattr(obj, 'author', None) or getattr(obj, 'user', None)\n        return owner == request.user\n\n# urls.py (app level)\nfrom django.urls import path, include\nfrom rest_framework.routers import DefaultRouter\nfrom . import views\n\nrouter = DefaultRouter()\nrouter.register(r'posts', views.PostViewSet)\nrouter.register(r'categories', views.CategoryViewSet)\nrouter.register(r'tags', views.TagViewSet)\nrouter.register(r'comments', views.CommentViewSet)\n\nurlpatterns = [\n    path('api/', include(router.urls)),\n]\n\n# urls.py (project level)\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('api.urls')),\n    path('api-auth/', include('rest_framework.urls')),\n]",
          "duration": 12
        },
        {
          "id": "authentication",
          "title": "Authentication & Permissions",
          "content": "Implement token authentication, custom permissions, and user management in Django REST Framework.",
          "codeExample": "# Install additional packages\n# pip install djangorestframework-simplejwt\n# pip install django-allauth\n\n# settings.py JWT configuration\nfrom datetime import timedelta\n\nINSTALLED_APPS += [\n    'rest_framework_simplejwt',\n    'allauth',\n    'allauth.account',\n    'allauth.socialaccount',\n]\n\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n        'rest_framework.authentication.SessionAuthentication',\n    ],\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.IsAuthenticated',\n    ],\n}\n\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),\n    'ROTATE_REFRESH_TOKENS': True,\n    'BLACKLIST_AFTER_ROTATION': True,\n    'UPDATE_LAST_LOGIN': True,\n    'ALGORITHM': 'HS256',\n    'SIGNING_KEY': SECRET_KEY,\n    'VERIFYING_KEY': None,\n    'AUTH_HEADER_TYPES': ('Bearer',),\n    'USER_ID_FIELD': 'id',\n    'USER_ID_CLAIM': 'user_id',\n}\n\n# Custom User model (optional)\n# models.py\nfrom django.contrib.auth.models import AbstractUser\nfrom django.db import models\n\nclass CustomUser(AbstractUser):\n    email = models.EmailField(unique=True)\n    bio = models.TextField(max_length=500, blank=True)\n    avatar = models.ImageField(upload_to='avatars/', blank=True)\n    is_verified = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    \n    USERNAME_FIELD = 'email'\n    REQUIRED_FIELDS = ['username']\n\n# Authentication views\n# views.py\nfrom rest_framework import status, permissions\nfrom rest_framework.decorators import api_view, permission_classes\nfrom rest_framework.response import Response\nfrom rest_framework_simplejwt.tokens import RefreshToken\nfrom django.contrib.auth import authenticate\nfrom django.contrib.auth.models import User\nfrom .serializers import UserRegistrationSerializer, UserProfileSerializer\n\n@api_view(['POST'])\n@permission_classes([permissions.AllowAny])\ndef register(request):\n    \"\"\"User registration endpoint\"\"\"\n    serializer = UserRegistrationSerializer(data=request.data)\n    if serializer.is_valid():\n        user = serializer.save()\n        refresh = RefreshToken.for_user(user)\n        return Response({\n            'user': UserProfileSerializer(user).data,\n            'tokens': {\n                'refresh': str(refresh),\n                'access': str(refresh.access_token),\n            }\n        }, status=status.HTTP_201_CREATED)\n    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n@api_view(['POST'])\n@permission_classes([permissions.AllowAny])\ndef login(request):\n    \"\"\"User login endpoint\"\"\"\n    email = request.data.get('email')\n    password = request.data.get('password')\n    \n    if email and password:\n        user = authenticate(username=email, password=password)\n        if user:\n            refresh = RefreshToken.for_user(user)\n            return Response({\n                'user': UserProfileSerializer(user).data,\n                'tokens': {\n                    'refresh': str(refresh),\n                    'access': str(refresh.access_token),\n                }\n            })\n        else:\n            return Response(\n                {'error': 'Invalid credentials'},\n                status=status.HTTP_401_UNAUTHORIZED\n            )\n    \n    return Response(\n        {'error': 'Email and password required'},\n        status=status.HTTP_400_BAD_REQUEST\n    )\n\n@api_view(['POST'])\ndef logout(request):\n    \"\"\"User logout endpoint\"\"\"\n    try:\n        refresh_token = request.data[\"refresh\"]\n        token = RefreshToken(refresh_token)\n        token.blacklist()\n        return Response({'message': 'Successfully logged out'})\n    except Exception as e:\n        return Response(\n            {'error': 'Invalid token'},\n            status=status.HTTP_400_BAD_REQUEST\n        )\n\n@api_view(['GET', 'PUT'])\ndef profile(request):\n    \"\"\"User profile endpoint\"\"\"\n    if request.method == 'GET':\n        serializer = UserProfileSerializer(request.user)\n        return Response(serializer.data)\n    \n    elif request.method == 'PUT':\n        serializer = UserProfileSerializer(\n            request.user, \n            data=request.data, \n            partial=True\n        )\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n# Advanced permissions\n# permissions.py\nfrom rest_framework import permissions\n\nclass IsOwnerOrStaffOrReadOnly(permissions.BasePermission):\n    \"\"\"\n    Custom permission:\n    - Read: Anyone\n    - Write: Owner or staff only\n    \"\"\"\n    \n    def has_object_permission(self, request, view, obj):\n        # Read permissions for any request\n        if request.method in permissions.SAFE_METHODS:\n            return True\n        \n        # Write permissions for staff\n        if request.user.is_staff:\n            return True\n        \n        # Write permissions for the owner\n        return obj.author == request.user\n\nclass IsStaffOrReadOnly(permissions.BasePermission):\n    \"\"\"\n    Custom permission for staff-only write operations\n    \"\"\"\n    \n    def has_permission(self, request, view):\n        if request.method in permissions.SAFE_METHODS:\n            return True\n        return request.user.is_staff\n\nclass IsSelfOrStaff(permissions.BasePermission):\n    \"\"\"\n    Permission for user profile operations\n    \"\"\"\n    \n    def has_object_permission(self, request, view, obj):\n        return request.user == obj or request.user.is_staff\n\n# Role-based permissions\nclass RolePermission(permissions.BasePermission):\n    \"\"\"\n    Permission based on user roles\n    \"\"\"\n    required_roles = []\n    \n    def has_permission(self, request, view):\n        if not request.user.is_authenticated:\n            return False\n        \n        user_roles = getattr(request.user, 'roles', [])\n        return any(role in user_roles for role in self.required_roles)\n\nclass AdminOnlyPermission(RolePermission):\n    required_roles = ['admin']\n\nclass ModeratorPermission(RolePermission):\n    required_roles = ['admin', 'moderator']\n\n# Group-based permissions\nfrom django.contrib.auth.models import Group\n\nclass GroupPermission(permissions.BasePermission):\n    required_groups = []\n    \n    def has_permission(self, request, view):\n        if not request.user.is_authenticated:\n            return False\n        \n        user_groups = request.user.groups.values_list('name', flat=True)\n        return any(group in user_groups for group in self.required_groups)\n\n# Serializers for authentication\n# serializers.py\nfrom rest_framework import serializers\nfrom django.contrib.auth.models import User\nfrom django.contrib.auth.password_validation import validate_password\n\nclass UserRegistrationSerializer(serializers.ModelSerializer):\n    password = serializers.CharField(write_only=True, validators=[validate_password])\n    password_confirm = serializers.CharField(write_only=True)\n    \n    class Meta:\n        model = User\n        fields = ['username', 'email', 'password', 'password_confirm', 'first_name', 'last_name']\n    \n    def validate(self, data):\n        if data['password'] != data['password_confirm']:\n            raise serializers.ValidationError(\"Passwords don't match\")\n        return data\n    \n    def create(self, validated_data):\n        validated_data.pop('password_confirm')\n        user = User.objects.create_user(**validated_data)\n        return user\n\nclass UserProfileSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = ['id', 'username', 'email', 'first_name', 'last_name', 'date_joined']\n        read_only_fields = ['id', 'username', 'date_joined']\n\nclass ChangePasswordSerializer(serializers.Serializer):\n    old_password = serializers.CharField(required=True)\n    new_password = serializers.CharField(required=True, validators=[validate_password])\n    \n    def validate_old_password(self, value):\n        user = self.context['request'].user\n        if not user.check_password(value):\n            raise serializers.ValidationError(\"Old password is incorrect\")\n        return value\n    \n    def save(self):\n        user = self.context['request'].user\n        user.set_password(self.validated_data['new_password'])\n        user.save()\n        return user",
          "duration": 10
        }
      ]
    },
    {
      "id": "python-fundamentals",
      "title": "Python Programming",
      "description": "Master Python from basics to advanced concepts. Learn data structures, OOP, modules, and build real-world applications.",
      "category": "Programming Language",
      "difficulty": "Beginner",
      "duration": 95,
      "lessonCount": 10,
      "icon": "python",
      "color": "#3776ab",
      "order": 17,
      "lessons": [
        {
          "id": "intro",
          "title": "Python Basics & Syntax",
          "content": "Learn Python's fundamental syntax, variables, data types, and basic operations. Understand Python's philosophy and ecosystem.",
          "codeExample": "# Python Installation and Setup\n# Download from python.org or use package manager\n# pip install python\n\n# Basic Python syntax\nprint(\"Hello, Python!\")\n\n# Variables and data types\nname = \"Alice\"  # String\nage = 30        # Integer\nheight = 5.6    # Float\nis_student = True  # Boolean\n\n# Collections\nfruits = [\"apple\", \"banana\", \"orange\"]  # List\ncoordinates = (3, 5)  # Tuple\nuser_info = {\"name\": \"Bob\", \"age\": 25}  # Dictionary\nunique_numbers = {1, 2, 3, 4, 5}  # Set\n\n# Basic operations\nresult = 10 + 5 * 2\ngreeting = f\"Hello, {name}! You are {age} years old.\"\n\n# Input and output\n# user_input = input(\"Enter your name: \")\nprint(f\"Result: {result}\")\nprint(greeting)\n\n# Comments\n# This is a single-line comment\n\"\"\"\nThis is a\nmulti-line comment\n\"\"\"\n\n# Python's zen\nimport this",
          "duration": 8
        },
        {
          "id": "control-flow",
          "title": "Control Flow & Functions",
          "content": "Master Python's control structures, loops, conditional statements, and function definitions with parameters and return values.",
          "codeExample": "# Conditional statements\nage = 18\n\nif age >= 18:\n    print(\"You are an adult\")\nelif age >= 13:\n    print(\"You are a teenager\")\nelse:\n    print(\"You are a child\")\n\n# Loops\nfruits = [\"apple\", \"banana\", \"orange\"]\n\n# For loop\nfor fruit in fruits:\n    print(f\"I like {fruit}\")\n\n# While loop\ncount = 0\nwhile count < 5:\n    print(f\"Count: {count}\")\n    count += 1\n\n# Range function\nfor i in range(1, 6):\n    print(f\"Number: {i}\")\n\n# List comprehensions\nsquares = [x**2 for x in range(10)]\neven_squares = [x**2 for x in range(10) if x % 2 == 0]\n\n# Functions\ndef greet(name, age=None):\n    \"\"\"Greet a person with optional age.\"\"\"\n    if age:\n        return f\"Hello, {name}! You are {age} years old.\"\n    return f\"Hello, {name}!\"\n\ndef calculate_area(length, width):\n    \"\"\"Calculate rectangle area.\"\"\"\n    return length * width\n\n# Function calls\nmessage = greet(\"Alice\", 25)\narea = calculate_area(10, 5)\n\nprint(message)\nprint(f\"Area: {area}\")\n\n# Lambda functions\nsquare = lambda x: x**2\nnumbers = [1, 2, 3, 4, 5]\nsquared_numbers = list(map(square, numbers))\n\n# Built-in functions\nmax_value = max(numbers)\nmin_value = min(numbers)\ntotal = sum(numbers)\nlength = len(numbers)\n\nprint(f\"Max: {max_value}, Min: {min_value}, Sum: {total}, Length: {length}\")",
          "duration": 10
        },
        {
          "id": "data-structures",
          "title": "Data Structures & Algorithms",
          "content": "Deep dive into Python's built-in data structures and implement common algorithms and data manipulation techniques.",
          "codeExample": "# Lists - Mutable sequences\nfruits = [\"apple\", \"banana\", \"orange\"]\nfruits.append(\"grape\")\nfruits.insert(1, \"kiwi\")\nfruits.remove(\"banana\")\npopped = fruits.pop()\n\n# List methods\nfruits.sort()\nfruits.reverse()\nindex = fruits.index(\"apple\")\ncount = fruits.count(\"apple\")\n\n# Tuples - Immutable sequences\ncoordinates = (3, 5)\nx, y = coordinates  # Unpacking\n\n# Dictionaries - Key-value pairs\nstudent = {\n    \"name\": \"Alice\",\n    \"age\": 20,\n    \"courses\": [\"Math\", \"Science\"]\n}\n\n# Dictionary operations\nstudent[\"grade\"] = \"A\"\nname = student.get(\"name\", \"Unknown\")\nkeys = student.keys()\nvalues = student.values()\nitems = student.items()\n\n# Sets - Unique elements\nnumbers = {1, 2, 3, 4, 5}\nnumbers.add(6)\nnumbers.discard(3)\n\n# Set operations\nset1 = {1, 2, 3}\nset2 = {3, 4, 5}\nunion = set1 | set2\nintersection = set1 & set2\ndifference = set1 - set2\n\n# Common algorithms\ndef binary_search(arr, target):\n    \"\"\"Binary search implementation.\"\"\"\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1\n\ndef bubble_sort(arr):\n    \"\"\"Bubble sort implementation.\"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n    return arr\n\ndef fibonacci(n):\n    \"\"\"Generate Fibonacci sequence.\"\"\"\n    if n <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n\n# Usage examples\nnumbers = [64, 34, 25, 12, 22, 11, 90]\nsorted_numbers = bubble_sort(numbers.copy())\nprint(f\"Sorted: {sorted_numbers}\")\n\nindex = binary_search(sorted_numbers, 25)\nprint(f\"Index of 25: {index}\")\n\nfib_sequence = [fibonacci(i) for i in range(10)]\nprint(f\"Fibonacci: {fib_sequence}\")",
          "duration": 12
        },
        {
          "id": "oop",
          "title": "Object-Oriented Programming",
          "content": "Learn Python's OOP concepts including classes, inheritance, polymorphism, encapsulation, and special methods.",
          "codeExample": "# Basic class definition\nclass Person:\n    \"\"\"A simple Person class.\"\"\"\n    \n    # Class variable\n    species = \"Homo sapiens\"\n    \n    def __init__(self, name, age):\n        \"\"\"Initialize a Person instance.\"\"\"\n        self.name = name  # Instance variable\n        self.age = age\n        self._private_var = \"secret\"  # Convention for private\n    \n    def introduce(self):\n        \"\"\"Introduce the person.\"\"\"\n        return f\"Hi, I'm {self.name} and I'm {self.age} years old.\"\n    \n    def have_birthday(self):\n        \"\"\"Increase age by 1.\"\"\"\n        self.age += 1\n        return f\"Happy birthday! {self.name} is now {self.age}.\"\n    \n    def __str__(self):\n        \"\"\"String representation.\"\"\"\n        return f\"Person(name='{self.name}', age={self.age})\"\n    \n    def __repr__(self):\n        \"\"\"Developer representation.\"\"\"\n        return f\"Person('{self.name}', {self.age})\"\n\n# Inheritance\nclass Student(Person):\n    \"\"\"Student class inheriting from Person.\"\"\"\n    \n    def __init__(self, name, age, student_id, major):\n        super().__init__(name, age)  # Call parent constructor\n        self.student_id = student_id\n        self.major = major\n        self.courses = []\n    \n    def enroll(self, course):\n        \"\"\"Enroll in a course.\"\"\"\n        self.courses.append(course)\n        return f\"{self.name} enrolled in {course}\"\n    \n    def introduce(self):\n        \"\"\"Override parent method.\"\"\"\n        parent_intro = super().introduce()\n        return f\"{parent_intro} I'm studying {self.major}.\"\n\nclass Teacher(Person):\n    \"\"\"Teacher class inheriting from Person.\"\"\"\n    \n    def __init__(self, name, age, subject):\n        super().__init__(name, age)\n        self.subject = subject\n        self.students = []\n    \n    def add_student(self, student):\n        \"\"\"Add a student to the class.\"\"\"\n        self.students.append(student)\n        return f\"{student.name} added to {self.subject} class\"\n\n# Polymorphism and special methods\nclass BankAccount:\n    \"\"\"Bank account with special methods.\"\"\"\n    \n    def __init__(self, account_number, initial_balance=0):\n        self.account_number = account_number\n        self._balance = initial_balance\n    \n    @property\n    def balance(self):\n        \"\"\"Get account balance.\"\"\"\n        return self._balance\n    \n    @balance.setter\n    def balance(self, amount):\n        \"\"\"Set account balance with validation.\"\"\"\n        if amount < 0:\n            raise ValueError(\"Balance cannot be negative\")\n        self._balance = amount\n    \n    def deposit(self, amount):\n        \"\"\"Deposit money.\"\"\"\n        if amount > 0:\n            self._balance += amount\n            return f\"Deposited ${amount}. New balance: ${self._balance}\"\n        raise ValueError(\"Deposit amount must be positive\")\n    \n    def withdraw(self, amount):\n        \"\"\"Withdraw money.\"\"\"\n        if 0 < amount <= self._balance:\n            self._balance -= amount\n            return f\"Withdrew ${amount}. New balance: ${self._balance}\"\n        raise ValueError(\"Invalid withdrawal amount\")\n    \n    def __add__(self, other):\n        \"\"\"Add two accounts' balances.\"\"\"\n        if isinstance(other, BankAccount):\n            return self._balance + other._balance\n        return NotImplemented\n    \n    def __len__(self):\n        \"\"\"Return account number length.\"\"\"\n        return len(self.account_number)\n\n# Usage examples\nperson = Person(\"Alice\", 25)\nstudent = Student(\"Bob\", 20, \"S12345\", \"Computer Science\")\nteacher = Teacher(\"Dr. Smith\", 40, \"Mathematics\")\n\nprint(person.introduce())\nprint(student.introduce())\nprint(student.enroll(\"Python Programming\"))\nprint(teacher.add_student(student))\n\naccount1 = BankAccount(\"ACC001\", 1000)\naccount2 = BankAccount(\"ACC002\", 500)\n\nprint(account1.deposit(200))\nprint(account1.withdraw(150))\nprint(f\"Total balance: ${account1 + account2}\")",
          "duration": 12
        },
        {
          "id": "modules-packages",
          "title": "Modules, Packages & File I/O",
          "content": "Organize code with modules and packages, handle file operations, and work with Python's import system.",
          "codeExample": "# File I/O operations\n# Writing to a file\nwith open('example.txt', 'w') as file:\n    file.write(\"Hello, World!\\n\")\n    file.write(\"This is a test file.\\n\")\n\n# Reading from a file\nwith open('example.txt', 'r') as file:\n    content = file.read()\n    print(\"File content:\")\n    print(content)\n\n# Reading line by line\nwith open('example.txt', 'r') as file:\n    for line_number, line in enumerate(file, 1):\n        print(f\"Line {line_number}: {line.strip()}\")\n\n# Working with JSON\nimport json\n\n# Writing JSON\ndata = {\n    \"name\": \"Alice\",\n    \"age\": 30,\n    \"skills\": [\"Python\", \"JavaScript\", \"SQL\"]\n}\n\nwith open('data.json', 'w') as file:\n    json.dump(data, file, indent=2)\n\n# Reading JSON\nwith open('data.json', 'r') as file:\n    loaded_data = json.load(file)\n    print(f\"Loaded data: {loaded_data}\")\n\n# Working with CSV\nimport csv\n\n# Writing CSV\nemployees = [\n    ['Name', 'Age', 'Department'],\n    ['Alice', 30, 'Engineering'],\n    ['Bob', 25, 'Marketing'],\n    ['Charlie', 35, 'Sales']\n]\n\nwith open('employees.csv', 'w', newline='') as file:\n    writer = csv.writer(file)\n    writer.writerows(employees)\n\n# Reading CSV\nwith open('employees.csv', 'r') as file:\n    reader = csv.reader(file)\n    for row in reader:\n        print(row)\n\n# Module example - math_utils.py\ndef add(a, b):\n    \"\"\"Add two numbers.\"\"\"\n    return a + b\n\ndef multiply(a, b):\n    \"\"\"Multiply two numbers.\"\"\"\n    return a * b\n\ndef factorial(n):\n    \"\"\"Calculate factorial.\"\"\"\n    if n <= 1:\n        return 1\n    return n * factorial(n - 1)\n\n# Constants\nPI = 3.14159\nE = 2.71828\n\n# Using modules\n# import math_utils\n# result = math_utils.add(5, 3)\n\n# from math_utils import add, PI\n# result = add(5, 3)\n# area = PI * radius ** 2\n\n# Standard library modules\nimport os\nimport sys\nimport datetime\nimport random\nimport re\n\n# OS operations\ncurrent_dir = os.getcwd()\nfiles = os.listdir('.')\nfile_exists = os.path.exists('example.txt')\n\n# System information\npython_version = sys.version\ncommand_args = sys.argv\n\n# Date and time\nnow = datetime.datetime.now()\nformatted_date = now.strftime(\"%Y-%m-%d %H:%M:%S\")\n\n# Random operations\nrandom_number = random.randint(1, 100)\nrandom_choice = random.choice(['apple', 'banana', 'orange'])\n\n# Regular expressions\npattern = r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b'\ntext = \"Contact us at info@example.com or support@test.org\"\nemails = re.findall(pattern, text)\n\nprint(f\"Current directory: {current_dir}\")\nprint(f\"Files: {files}\")\nprint(f\"Current time: {formatted_date}\")\nprint(f\"Random number: {random_number}\")\nprint(f\"Found emails: {emails}\")\n\n# Exception handling\ntry:\n    number = int(input(\"Enter a number: \"))\n    result = 10 / number\n    print(f\"Result: {result}\")\nexcept ValueError:\n    print(\"Invalid input! Please enter a number.\")\nexcept ZeroDivisionError:\n    print(\"Cannot divide by zero!\")\nexcept Exception as e:\n    print(f\"An error occurred: {e}\")\nfinally:\n    print(\"Execution completed.\")",
          "duration": 10
        }
      ]
    },
    {
      "id": "java-fundamentals",
      "title": "Java Programming",
      "description": "Learn Java programming from basics to advanced concepts. Master OOP, collections, streams, and enterprise development patterns.",
      "category": "Programming Language",
      "difficulty": "Intermediate",
      "duration": 105,
      "lessonCount": 11,
      "icon": "java",
      "color": "#f89820",
      "order": 18,
      "lessons": [
        {
          "id": "intro",
          "title": "Java Basics & Syntax",
          "content": "Learn Java's fundamental syntax, variables, data types, and the Java Virtual Machine. Understand Java's 'write once, run anywhere' philosophy.",
          "codeExample": "// Java installation and setup\n// Download JDK from oracle.com or use OpenJDK\n// Set JAVA_HOME environment variable\n\n// Basic Java syntax\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, Java!\");\n    }\n}\n\n// Variables and data types\npublic class DataTypes {\n    public static void main(String[] args) {\n        // Primitive data types\n        int age = 25;\n        double height = 5.9;\n        boolean isStudent = true;\n        char grade = 'A';\n        \n        // Reference types\n        String name = \"Alice\";\n        String message = \"Hello, \" + name + \"!\";\n        \n        // Arrays\n        int[] numbers = {1, 2, 3, 4, 5};\n        String[] fruits = new String[3];\n        fruits[0] = \"apple\";\n        fruits[1] = \"banana\";\n        fruits[2] = \"orange\";\n        \n        // Constants\n        final double PI = 3.14159;\n        final String COMPANY_NAME = \"TechCorp\";\n        \n        // Output\n        System.out.println(\"Name: \" + name);\n        System.out.println(\"Age: \" + age);\n        System.out.println(\"Height: \" + height);\n        System.out.println(\"Is student: \" + isStudent);\n        System.out.println(\"Grade: \" + grade);\n        System.out.println(\"Message: \" + message);\n        \n        // Array iteration\n        System.out.println(\"Numbers:\");\n        for (int number : numbers) {\n            System.out.print(number + \" \");\n        }\n        System.out.println();\n        \n        System.out.println(\"Fruits:\");\n        for (String fruit : fruits) {\n            System.out.println(\"- \" + fruit);\n        }\n    }\n}\n\n// Compile and run\n// javac HelloWorld.java\n// java HelloWorld",
          "duration": 9
        },
        {
          "id": "control-flow",
          "title": "Control Flow & Methods",
          "content": "Master Java's control structures, loops, conditional statements, and method definitions with parameters and return types.",
          "codeExample": "public class ControlFlow {\n    \n    public static void main(String[] args) {\n        // Conditional statements\n        int age = 18;\n        \n        if (age >= 18) {\n            System.out.println(\"You are an adult\");\n        } else if (age >= 13) {\n            System.out.println(\"You are a teenager\");\n        } else {\n            System.out.println(\"You are a child\");\n        }\n        \n        // Switch statement\n        String day = \"Monday\";\n        switch (day) {\n            case \"Monday\":\n                System.out.println(\"Start of work week\");\n                break;\n            case \"Friday\":\n                System.out.println(\"TGIF!\");\n                break;\n            case \"Saturday\":\n            case \"Sunday\":\n                System.out.println(\"Weekend!\");\n                break;\n            default:\n                System.out.println(\"Midweek\");\n        }\n        \n        // For loops\n        System.out.println(\"Counting 1 to 5:\");\n        for (int i = 1; i <= 5; i++) {\n            System.out.print(i + \" \");\n        }\n        System.out.println();\n        \n        // Enhanced for loop\n        String[] names = {\"Alice\", \"Bob\", \"Charlie\"};\n        System.out.println(\"Names:\");\n        for (String name : names) {\n            System.out.println(\"- \" + name);\n        }\n        \n        // While loop\n        int count = 0;\n        while (count < 3) {\n            System.out.println(\"Count: \" + count);\n            count++;\n        }\n        \n        // Do-while loop\n        int num = 0;\n        do {\n            System.out.println(\"Number: \" + num);\n            num++;\n        } while (num < 3);\n        \n        // Method calls\n        String greeting = greet(\"Alice\");\n        System.out.println(greeting);\n        \n        int sum = add(10, 5);\n        System.out.println(\"Sum: \" + sum);\n        \n        double area = calculateRectangleArea(4.5, 3.2);\n        System.out.println(\"Area: \" + area);\n        \n        // Method overloading\n        System.out.println(multiply(3, 4));\n        System.out.println(multiply(2.5, 3.0));\n        System.out.println(multiply(2, 3, 4));\n    }\n    \n    // Method with return type\n    public static String greet(String name) {\n        return \"Hello, \" + name + \"!\";\n    }\n    \n    // Method with parameters\n    public static int add(int a, int b) {\n        return a + b;\n    }\n    \n    // Method with double parameters\n    public static double calculateRectangleArea(double length, double width) {\n        return length * width;\n    }\n    \n    // Method overloading - same name, different parameters\n    public static int multiply(int a, int b) {\n        return a * b;\n    }\n    \n    public static double multiply(double a, double b) {\n        return a * b;\n    }\n    \n    public static int multiply(int a, int b, int c) {\n        return a * b * c;\n    }\n    \n    // Recursive method\n    public static int factorial(int n) {\n        if (n <= 1) {\n            return 1;\n        }\n        return n * factorial(n - 1);\n    }\n    \n    // Method with variable arguments\n    public static int sum(int... numbers) {\n        int total = 0;\n        for (int number : numbers) {\n            total += number;\n        }\n        return total;\n    }\n}",
          "duration": 10
        }
      ]
    },
    {
      "id": "go-fundamentals",
      "title": "Go Programming",
      "description": "Learn Go (Golang) programming language. Master goroutines, channels, interfaces, and build efficient concurrent applications.",
      "category": "Programming Language",
      "difficulty": "Intermediate",
      "duration": 88,
      "lessonCount": 9,
      "icon": "go",
      "color": "#00add8",
      "order": 19,
      "lessons": [
        {
          "id": "intro",
          "title": "Go Basics & Syntax",
          "content": "Learn Go's clean syntax, variables, data types, and understand Go's design philosophy of simplicity and efficiency.",
          "codeExample": "// Go installation and setup\n// Download from golang.org\n// Set GOPATH and add Go to PATH\n\npackage main\n\nimport (\n    \"fmt\"\n    \"math\"\n    \"strings\"\n)\n\nfunc main() {\n    // Basic output\n    fmt.Println(\"Hello, Go!\")\n    \n    // Variables\n    var name string = \"Alice\"\n    var age int = 30\n    var height float64 = 5.6\n    var isStudent bool = true\n    \n    // Short variable declaration\n    city := \"New York\"\n    temperature := 23.5\n    \n    // Multiple variable declaration\n    var (\n        firstName = \"John\"\n        lastName  = \"Doe\"\n        salary    = 50000.0\n    )\n    \n    // Constants\n    const Pi = 3.14159\n    const CompanyName = \"TechCorp\"\n    \n    // Arrays\n    var numbers [5]int = [5]int{1, 2, 3, 4, 5}\n    fruits := [3]string{\"apple\", \"banana\", \"orange\"}\n    \n    // Slices (dynamic arrays)\n    colors := []string{\"red\", \"green\", \"blue\"}\n    colors = append(colors, \"yellow\")\n    \n    // Maps\n    person := map[string]interface{}{\n        \"name\":      \"Bob\",\n        \"age\":       25,\n        \"isStudent\": false,\n    }\n    \n    // Output variables\n    fmt.Printf(\"Name: %s, Age: %d\\n\", name, age)\n    fmt.Printf(\"Height: %.1f, Student: %t\\n\", height, isStudent)\n    fmt.Printf(\"City: %s, Temperature: %.1f°C\\n\", city, temperature)\n    \n    // String operations\n    fullName := firstName + \" \" + lastName\n    upperName := strings.ToUpper(fullName)\n    nameLength := len(fullName)\n    \n    fmt.Printf(\"Full name: %s (length: %d)\\n\", fullName, nameLength)\n    fmt.Printf(\"Upper case: %s\\n\", upperName)\n    \n    // Math operations\n    sqrt := math.Sqrt(16)\n    power := math.Pow(2, 3)\n    fmt.Printf(\"Square root of 16: %.1f\\n\", sqrt)\n    fmt.Printf(\"2^3 = %.0f\\n\", power)\n    \n    // Array/slice iteration\n    fmt.Println(\"Numbers:\")\n    for i, num := range numbers {\n        fmt.Printf(\"Index %d: %d\\n\", i, num)\n    }\n    \n    fmt.Println(\"Colors:\")\n    for _, color := range colors {\n        fmt.Printf(\"- %s\\n\", color)\n    }\n    \n    // Map iteration\n    fmt.Println(\"Person details:\")\n    for key, value := range person {\n        fmt.Printf(\"%s: %v\\n\", key, value)\n    }\n}\n\n// Build and run\n// go build main.go\n// ./main\n// or\n// go run main.go",
          "duration": 8
        }
      ]
    },
    {
      "id": "rust-fundamentals",
      "title": "Rust Programming",
      "description": "Master Rust's memory safety, ownership system, and performance. Build reliable and efficient systems programming applications.",
      "category": "Programming Language",
      "difficulty": "Advanced",
      "duration": 120,
      "lessonCount": 12,
      "icon": "rust",
      "color": "#ce422b",
      "order": 20,
      "lessons": [
        {
          "id": "intro",
          "title": "Rust Basics & Ownership",
          "content": "Learn Rust's unique ownership system, memory safety guarantees, and fundamental syntax. Understand borrowing and lifetimes.",
          "codeExample": "// Rust installation and setup\n// Install via rustup: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n// cargo new my_project\n// cd my_project\n\nfn main() {\n    // Basic output\n    println!(\"Hello, Rust!\");\n    \n    // Variables and mutability\n    let name = \"Alice\";  // Immutable by default\n    let mut age = 30;    // Mutable variable\n    age = 31;            // Can change mutable variables\n    \n    // Data types\n    let integer: i32 = 42;\n    let float: f64 = 3.14;\n    let boolean: bool = true;\n    let character: char = 'R';\n    \n    // String types\n    let string_literal = \"Hello\";        // &str (string slice)\n    let owned_string = String::from(\"World\");  // String (owned)\n    let combined = format!(\"{} {}\", string_literal, owned_string);\n    \n    // Arrays and vectors\n    let array: [i32; 5] = [1, 2, 3, 4, 5];\n    let mut vector = vec![1, 2, 3];\n    vector.push(4);\n    \n    // Tuples\n    let coordinates: (f64, f64) = (3.0, 4.0);\n    let (x, y) = coordinates;  // Destructuring\n    \n    // Ownership example\n    let s1 = String::from(\"hello\");\n    let s2 = s1;  // s1 is moved to s2, s1 is no longer valid\n    // println!(\"{}\", s1);  // This would cause a compile error\n    println!(\"{}\", s2);  // This works\n    \n    // Borrowing (references)\n    let s3 = String::from(\"world\");\n    let len = calculate_length(&s3);  // Borrow s3\n    println!(\"Length of '{}' is {}\", s3, len);  // s3 is still valid\n    \n    // Mutable references\n    let mut s4 = String::from(\"hello\");\n    change_string(&mut s4);\n    println!(\"Changed string: {}\", s4);\n    \n    // Slices\n    let word = String::from(\"hello world\");\n    let hello = &word[0..5];\n    let world = &word[6..11];\n    println!(\"First word: {}, Second word: {}\", hello, world);\n    \n    // Control flow\n    if age > 18 {\n        println!(\"Adult\");\n    } else {\n        println!(\"Minor\");\n    }\n    \n    // Pattern matching with match\n    let number = 3;\n    match number {\n        1 => println!(\"One\"),\n        2 => println!(\"Two\"),\n        3 => println!(\"Three\"),\n        _ => println!(\"Other\"),\n    }\n    \n    // Loops\n    for i in 0..5 {\n        println!(\"Number: {}\", i);\n    }\n    \n    for item in &vector {\n        println!(\"Vector item: {}\", item);\n    }\n    \n    let mut counter = 0;\n    while counter < 3 {\n        println!(\"Counter: {}\", counter);\n        counter += 1;\n    }\n    \n    // Function calls\n    let result = add_numbers(5, 3);\n    println!(\"5 + 3 = {}\", result);\n    \n    let (sum, product) = calculate_sum_and_product(4, 6);\n    println!(\"Sum: {}, Product: {}\", sum, product);\n}\n\n// Function that borrows a string\nfn calculate_length(s: &String) -> usize {\n    s.len()\n}\n\n// Function that borrows a mutable string\nfn change_string(s: &mut String) {\n    s.push_str(\", world!\");\n}\n\n// Function with parameters and return type\nfn add_numbers(a: i32, b: i32) -> i32 {\n    a + b  // No semicolon = return value\n}\n\n// Function returning multiple values\nfn calculate_sum_and_product(a: i32, b: i32) -> (i32, i32) {\n    (a + b, a * b)\n}\n\n// Build and run\n// cargo build\n// cargo run\n// cargo check  (fast compile check)",
          "duration": 12
        }
      ]
    },
    {
      "id": "php-fundamentals",
      "title": "PHP Development",
      "description": "Learn modern PHP development from basics to advanced concepts. Master web development, databases, and popular PHP frameworks.",
      "category": "Programming Language",
      "difficulty": "Beginner",
      "duration": 78,
      "lessonCount": 8,
      "icon": "php",
      "color": "#777bb4",
      "order": 21,
      "lessons": [
        {
          "id": "intro",
          "title": "PHP Basics & Syntax",
          "content": "Learn PHP's fundamental syntax, variables, data types, and web development basics. Understand server-side programming concepts.",
          "codeExample": "<?php\n// PHP installation and setup\n// Install PHP from php.net or use XAMPP/WAMP\n// Configure web server (Apache/Nginx)\n\n// Basic PHP syntax\necho \"Hello, PHP!\";\nprint \"Hello again!\";\n\n// Variables (start with $)\n$name = \"Alice\";\n$age = 30;\n$height = 5.6;\n$isStudent = true;\n\n// Data types\n$integer = 42;\n$float = 3.14;\n$boolean = true;\n$string = \"Hello World\";\n$array = [1, 2, 3, 4, 5];\n$null_var = null;\n\n// String concatenation\n$greeting = \"Hello, \" . $name . \"!\";\n$message = \"Welcome to PHP programming.\";\n\n// Arrays\n$fruits = [\"apple\", \"banana\", \"orange\"];\n$colors = array(\"red\", \"green\", \"blue\");\n\n// Associative arrays\n$person = [\n    \"name\" => \"Bob\",\n    \"age\" => 25,\n    \"city\" => \"New York\"\n];\n\n// Multidimensional arrays\n$students = [\n    [\"name\" => \"Alice\", \"grade\" => \"A\"],\n    [\"name\" => \"Bob\", \"grade\" => \"B\"],\n    [\"name\" => \"Charlie\", \"grade\" => \"A\"]\n];\n\n// Constants\ndefine(\"PI\", 3.14159);\nconst COMPANY_NAME = \"TechCorp\";\n\n// Output variables\necho \"<h1>PHP Variables Demo</h1>\";\necho \"<p>Name: $name</p>\";\necho \"<p>Age: $age</p>\";\necho \"<p>Height: $height</p>\";\necho \"<p>Is Student: \" . ($isStudent ? \"Yes\" : \"No\") . \"</p>\";\necho \"<p>Greeting: $greeting</p>\";\n\n// String functions\necho \"<h2>String Functions</h2>\";\necho \"<p>String length: \" . strlen($message) . \"</p>\";\necho \"<p>Uppercase: \" . strtoupper($message) . \"</p>\";\necho \"<p>Lowercase: \" . strtolower($message) . \"</p>\";\necho \"<p>Word count: \" . str_word_count($message) . \"</p>\";\necho \"<p>Reversed: \" . strrev($name) . \"</p>\";\n\n// Array functions\necho \"<h2>Array Operations</h2>\";\necho \"<p>Fruits count: \" . count($fruits) . \"</p>\";\narray_push($fruits, \"grape\");\necho \"<p>After adding grape: \" . implode(\", \", $fruits) . \"</p>\";\n\n// Array iteration\necho \"<h3>Fruits List:</h3>\";\necho \"<ul>\";\nforeach ($fruits as $fruit) {\n    echo \"<li>$fruit</li>\";\n}\necho \"</ul>\";\n\n// Associative array iteration\necho \"<h3>Person Details:</h3>\";\necho \"<ul>\";\nforeach ($person as $key => $value) {\n    echo \"<li>$key: $value</li>\";\n}\necho \"</ul>\";\n\n// Superglobals demo\necho \"<h2>Superglobals</h2>\";\necho \"<p>Server Name: \" . $_SERVER['SERVER_NAME'] . \"</p>\";\necho \"<p>Request Method: \" . $_SERVER['REQUEST_METHOD'] . \"</p>\";\necho \"<p>User Agent: \" . $_SERVER['HTTP_USER_AGENT'] . \"</p>\";\n\n// Date and time\necho \"<h2>Date and Time</h2>\";\necho \"<p>Current date: \" . date('Y-m-d') . \"</p>\";\necho \"<p>Current time: \" . date('H:i:s') . \"</p>\";\necho \"<p>Full datetime: \" . date('Y-m-d H:i:s') . \"</p>\";\necho \"<p>Timestamp: \" . time() . \"</p>\";\n\n// Math operations\necho \"<h2>Math Operations</h2>\";\necho \"<p>Random number: \" . rand(1, 100) . \"</p>\";\necho \"<p>Square root of 16: \" . sqrt(16) . \"</p>\";\necho \"<p>2 to power 3: \" . pow(2, 3) . \"</p>\";\necho \"<p>Round 3.7: \" . round(3.7) . \"</p>\";\n\n?>\n\n<!-- HTML can be mixed with PHP -->\n<!DOCTYPE html>\n<html>\n<head>\n    <title>PHP Demo</title>\n</head>\n<body>\n    <h1><?php echo \"Dynamic Content with PHP\"; ?></h1>\n    <p>Today is <?php echo date('l, F j, Y'); ?></p>\n</body>\n</html>",
          "duration": 9
        }
      ]
    },
    {
      "id": "ruby-fundamentals",
      "title": "Ruby Programming",
      "description": "Master Ruby's elegant syntax and object-oriented features. Learn metaprogramming, blocks, and build dynamic applications.",
      "category": "Programming Language",
      "difficulty": "Beginner",
      "duration": 85,
      "lessonCount": 9,
      "icon": "ruby",
      "color": "#cc342d",
      "order": 22,
      "lessons": [
        {
          "id": "intro",
          "title": "Ruby Basics & Syntax",
          "content": "Learn Ruby's elegant and expressive syntax, variables, data types, and understand Ruby's philosophy of programmer happiness.",
          "codeExample": "# Ruby installation and setup\n# Install via RVM: curl -sSL https://get.rvm.io | bash\n# rvm install ruby\n# or use rbenv, or install from ruby-lang.org\n\n# Basic output\nputs \"Hello, Ruby!\"\nprint \"Hello again! \"\np \"This shows quotes\"\n\n# Variables (no declaration needed)\nname = \"Alice\"\nage = 30\nheight = 5.6\nis_student = true\n\n# Constants (start with capital letter)\nPI = 3.14159\nCOMPANY_NAME = \"TechCorp\"\n\n# Data types\ninteger = 42\nfloat = 3.14\nboolean = true\nstring = \"Hello World\"\nsymbol = :ruby\nnil_value = nil\n\n# String interpolation\ngreeting = \"Hello, #{name}!\"\nmessage = \"You are #{age} years old\"\n\n# Arrays\nfruits = [\"apple\", \"banana\", \"orange\"]\nnumbers = [1, 2, 3, 4, 5]\nmixed = [\"string\", 42, true, :symbol]\n\n# Hashes (like dictionaries/maps)\nperson = {\n  \"name\" => \"Bob\",\n  \"age\" => 25,\n  \"city\" => \"New York\"\n}\n\n# Modern hash syntax (symbols as keys)\nuser = {\n  name: \"Charlie\",\n  age: 28,\n  role: \"developer\"\n}\n\n# Ranges\nrange1 = 1..5      # inclusive\nrange2 = 1...5     # exclusive\nletters = 'a'..'z'\n\n# Output variables\nputs \"=== Variable Demo ===\"\nputs \"Name: #{name}\"\nputs \"Age: #{age}\"\nputs \"Height: #{height}\"\nputs \"Is Student: #{is_student}\"\nputs \"Greeting: #{greeting}\"\nputs \"Message: #{message}\"\n\n# String methods\nputs \"\\n=== String Methods ===\"\nputs \"Length: #{message.length}\"\nputs \"Uppercase: #{message.upcase}\"\nputs \"Lowercase: #{message.downcase}\"\nputs \"Capitalized: #{message.capitalize}\"\nputs \"Reversed: #{name.reverse}\"\nputs \"Includes 'Ruby': #{greeting.include?('Alice')}\"\n\n# Array methods\nputs \"\\n=== Array Methods ===\"\nputs \"Fruits: #{fruits}\"\nputs \"Count: #{fruits.count}\"\nfruits << \"grape\"  # Add element\nfruits.push(\"kiwi\")\nputs \"After adding: #{fruits}\"\nputs \"First fruit: #{fruits.first}\"\nputs \"Last fruit: #{fruits.last}\"\nputs \"Joined: #{fruits.join(', ')}\"\n\n# Array iteration\nputs \"\\n=== Array Iteration ===\"\nfruits.each do |fruit|\n  puts \"- #{fruit}\"\nend\n\n# Alternative block syntax\nfruits.each { |fruit| puts \"* #{fruit}\" }\n\n# Hash operations\nputs \"\\n=== Hash Operations ===\"\nputs \"Person: #{person}\"\nputs \"Name: #{person['name']}\"\nputs \"User name: #{user[:name]}\"\nputs \"Keys: #{user.keys}\"\nputs \"Values: #{user.values}\"\n\n# Hash iteration\nputs \"\\nUser details:\"\nuser.each do |key, value|\n  puts \"#{key}: #{value}\"\nend\n\n# Conditional statements\nputs \"\\n=== Conditionals ===\"\nif age >= 18\n  puts \"You are an adult\"\nelsif age >= 13\n  puts \"You are a teenager\"\nelse\n  puts \"You are a child\"\nend\n\n# Unless (negative if)\nunless age < 18\n  puts \"Not a minor\"\nend\n\n# Ternary operator\nstatus = age >= 18 ? \"adult\" : \"minor\"\nputs \"Status: #{status}\"\n\n# Case statement\nday = \"Monday\"\ncase day\nwhen \"Monday\"\n  puts \"Start of work week\"\nwhen \"Friday\"\n  puts \"TGIF!\"\nwhen \"Saturday\", \"Sunday\"\n  puts \"Weekend!\"\nelse\n  puts \"Midweek\"\nend\n\n# Loops\nputs \"\\n=== Loops ===\"\n\n# Times loop\n3.times do |i|\n  puts \"Iteration #{i}\"\nend\n\n# For loop with range\nfor i in 1..3\n  puts \"Number: #{i}\"\nend\n\n# While loop\ncount = 0\nwhile count < 3\n  puts \"Count: #{count}\"\n  count += 1\nend\n\n# Until loop (opposite of while)\nnum = 0\nuntil num >= 3\n  puts \"Num: #{num}\"\n  num += 1\nend\n\n# Methods (functions)\ndef greet(name)\n  \"Hello, #{name}!\"\nend\n\ndef add(a, b)\n  a + b  # implicit return\nend\n\ndef multiply(a, b = 1)  # default parameter\n  a * b\nend\n\n# Method calls\nputs \"\\n=== Methods ===\"\nputs greet(\"Ruby\")\nputs \"5 + 3 = #{add(5, 3)}\"\nputs \"4 * 5 = #{multiply(4, 5)}\"\nputs \"4 * default = #{multiply(4)}\"\n\n# Everything is an object\nputs \"\\n=== Everything is an Object ===\"\nputs 42.class\nputs \"string\".class\nputs [1, 2, 3].class\nputs true.class\nputs nil.class\n\n# Method chaining\nresult = \"hello world\".upcase.reverse.gsub(\"D\", \"d\")\nputs \"Chained result: #{result}\"\n\n# Blocks, Procs, and Lambdas preview\nputs \"\\n=== Blocks Preview ===\"\n(1..5).each { |n| puts \"Square of #{n}: #{n * n}\" }\n\n# Select (filter)\neven_numbers = (1..10).select { |n| n.even? }\nputs \"Even numbers: #{even_numbers}\"\n\n# Map (transform)\nsquares = (1..5).map { |n| n * n }\nputs \"Squares: #{squares}\"\n\n# Run Ruby code\n# ruby script.rb\n# or interactive Ruby shell: irb",
          "duration": 10
        }
      ]
    },
    {
      "id": "react-native-fundamentals",
      "title": "React Native Development",
      "description": "Build native mobile apps using React Native. Learn navigation, device APIs, state management, and publish to app stores.",
      "category": "Mobile Development",
      "difficulty": "Intermediate",
      "duration": 92,
      "lessonCount": 9,
      "icon": "react-native",
      "color": "#61dafb",
      "order": 23,
      "lessons": [
        {
          "id": "intro",
          "title": "React Native Setup",
          "content": "Set up React Native development environment, understand the architecture, and create your first mobile application.",
          "codeExample": "// React Native installation and setup\n// Install Node.js, React Native CLI, Android Studio, Xcode\n\n// Create new React Native project\nnpx react-native init MyApp\ncd MyApp\n\n// Start Metro bundler\nnpx react-native start\n\n// Run on Android (separate terminal)\nnpx react-native run-android\n\n// Run on iOS (Mac only)\nnpx react-native run-ios\n\n// App.js - Basic React Native component\nimport React from 'react';\nimport {\n  SafeAreaView,\n  ScrollView,\n  StatusBar,\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  Alert,\n} from 'react-native';\n\nfunction App() {\n  const showAlert = () => {\n    Alert.alert(\n      'Hello!',\n      'Welcome to React Native',\n      [\n        {text: 'Cancel', style: 'cancel'},\n        {text: 'OK', onPress: () => console.log('OK Pressed')},\n      ]\n    );\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <StatusBar barStyle=\"dark-content\" backgroundColor=\"#f8f9fa\" />\n      <ScrollView contentInsetAdjustmentBehavior=\"automatic\">\n        <View style={styles.body}>\n          <Text style={styles.title}>Welcome to React Native!</Text>\n          <Text style={styles.subtitle}>Build amazing mobile apps</Text>\n          \n          <TouchableOpacity style={styles.button} onPress={showAlert}>\n            <Text style={styles.buttonText}>Press Me</Text>\n          </TouchableOpacity>\n          \n          <View style={styles.infoContainer}>\n            <Text style={styles.infoText}>🚀 Cross-platform development</Text>\n            <Text style={styles.infoText}>⚡ Hot reloading</Text>\n            <Text style={styles.infoText}>📱 Native performance</Text>\n          </View>\n        </View>\n      </ScrollView>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f8f9fa',\n  },\n  body: {\n    padding: 20,\n    alignItems: 'center',\n  },\n  title: {\n    fontSize: 28,\n    fontWeight: 'bold',\n    color: '#333',\n    marginBottom: 10,\n    textAlign: 'center',\n  },\n  subtitle: {\n    fontSize: 18,\n    color: '#666',\n    marginBottom: 30,\n    textAlign: 'center',\n  },\n  button: {\n    backgroundColor: '#007AFF',\n    paddingHorizontal: 30,\n    paddingVertical: 15,\n    borderRadius: 25,\n    marginBottom: 30,\n  },\n  buttonText: {\n    color: 'white',\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  infoContainer: {\n    alignItems: 'flex-start',\n  },\n  infoText: {\n    fontSize: 16,\n    marginBottom: 10,\n    color: '#444',\n  },\n});\n\nexport default App;\n\n// Package.json scripts\n// \"scripts\": {\n//   \"android\": \"react-native run-android\",\n//   \"ios\": \"react-native run-ios\",\n//   \"start\": \"react-native start\",\n//   \"test\": \"jest\",\n//   \"lint\": \"eslint . --ext .js,.jsx,.ts,.tsx\"\n// }",
          "duration": 10
        },
        {
          "id": "navigation",
          "title": "Navigation & Routing",
          "content": "Implement navigation between screens using React Navigation. Learn stack, tab, and drawer navigation patterns.",
          "codeExample": "// Install React Navigation\nnpm install @react-navigation/native\nnpm install react-native-screens react-native-safe-area-context\nnpm install @react-navigation/native-stack\nnpm install @react-navigation/bottom-tabs\n\n// For iOS, run: cd ios && pod install\n\n// App.js - Navigation setup\nimport React from 'react';\nimport {NavigationContainer} from '@react-navigation/native';\nimport {createNativeStackNavigator} from '@react-navigation/native-stack';\nimport {createBottomTabNavigator} from '@react-navigation/bottom-tabs';\nimport Icon from 'react-native-vector-icons/Ionicons';\n\nimport HomeScreen from './screens/HomeScreen';\nimport ProfileScreen from './screens/ProfileScreen';\nimport DetailsScreen from './screens/DetailsScreen';\nimport SettingsScreen from './screens/SettingsScreen';\n\nconst Stack = createNativeStackNavigator();\nconst Tab = createBottomTabNavigator();\n\n// Stack Navigator\nfunction HomeStack() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen \n        name=\"Home\" \n        component={HomeScreen}\n        options={{\n          title: 'Welcome',\n          headerStyle: {backgroundColor: '#007AFF'},\n          headerTintColor: '#fff',\n        }}\n      />\n      <Stack.Screen \n        name=\"Details\" \n        component={DetailsScreen}\n        options={({route}) => ({\n          title: route.params?.title || 'Details',\n        })}\n      />\n    </Stack.Navigator>\n  );\n}\n\n// Tab Navigator\nfunction App() {\n  return (\n    <NavigationContainer>\n      <Tab.Navigator\n        screenOptions={({route}) => ({\n          tabBarIcon: ({focused, color, size}) => {\n            let iconName;\n            if (route.name === 'HomeTab') {\n              iconName = focused ? 'home' : 'home-outline';\n            } else if (route.name === 'Profile') {\n              iconName = focused ? 'person' : 'person-outline';\n            } else if (route.name === 'Settings') {\n              iconName = focused ? 'settings' : 'settings-outline';\n            }\n            return <Icon name={iconName} size={size} color={color} />;\n          },\n          tabBarActiveTintColor: '#007AFF',\n          tabBarInactiveTintColor: 'gray',\n          headerShown: false,\n        })}\n      >\n        <Tab.Screen \n          name=\"HomeTab\" \n          component={HomeStack}\n          options={{title: 'Home'}}\n        />\n        <Tab.Screen name=\"Profile\" component={ProfileScreen} />\n        <Tab.Screen name=\"Settings\" component={SettingsScreen} />\n      </Tab.Navigator>\n    </NavigationContainer>\n  );\n}\n\n// screens/HomeScreen.js\nimport React from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TouchableOpacity,\n  FlatList,\n} from 'react-native';\n\nconst HomeScreen = ({navigation}) => {\n  const items = [\n    {id: '1', title: 'Learn React Native', description: 'Mobile development'},\n    {id: '2', title: 'Build Apps', description: 'Create amazing apps'},\n    {id: '3', title: 'Publish to Stores', description: 'Google Play & App Store'},\n  ];\n\n  const renderItem = ({item}) => (\n    <TouchableOpacity \n      style={styles.item}\n      onPress={() => navigation.navigate('Details', {\n        title: item.title,\n        description: item.description,\n      })}\n    >\n      <Text style={styles.itemTitle}>{item.title}</Text>\n      <Text style={styles.itemDescription}>{item.description}</Text>\n    </TouchableOpacity>\n  );\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Welcome to React Native!</Text>\n      <FlatList\n        data={items}\n        renderItem={renderItem}\n        keyExtractor={item => item.id}\n        style={styles.list}\n      />\n    </View>\n  );\n};\n\n// screens/DetailsScreen.js\nimport React from 'react';\nimport {View, Text, StyleSheet, TouchableOpacity} from 'react-native';\n\nconst DetailsScreen = ({route, navigation}) => {\n  const {title, description} = route.params;\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>{title}</Text>\n      <Text style={styles.description}>{description}</Text>\n      \n      <TouchableOpacity \n        style={styles.button}\n        onPress={() => navigation.goBack()}\n      >\n        <Text style={styles.buttonText}>Go Back</Text>\n      </TouchableOpacity>\n      \n      <TouchableOpacity \n        style={styles.button}\n        onPress={() => navigation.popToTop()}\n      >\n        <Text style={styles.buttonText}>Go to Home</Text>\n      </TouchableOpacity>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 20,\n    backgroundColor: '#f8f9fa',\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 20,\n    textAlign: 'center',\n  },\n  list: {\n    flex: 1,\n  },\n  item: {\n    backgroundColor: 'white',\n    padding: 20,\n    marginVertical: 8,\n    borderRadius: 10,\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: {width: 0, height: 2},\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n  },\n  itemTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    marginBottom: 5,\n  },\n  itemDescription: {\n    fontSize: 14,\n    color: '#666',\n  },\n  description: {\n    fontSize: 16,\n    color: '#666',\n    marginBottom: 30,\n    textAlign: 'center',\n  },\n  button: {\n    backgroundColor: '#007AFF',\n    padding: 15,\n    borderRadius: 8,\n    marginBottom: 10,\n  },\n  buttonText: {\n    color: 'white',\n    textAlign: 'center',\n    fontSize: 16,\n    fontWeight: '600',\n  },\n});\n\nexport default HomeScreen;",
          "duration": 12
        }
      ]
    },
    {
      "id": "flutter-fundamentals",
      "title": "Flutter Development",
      "description": "Build beautiful native apps with Flutter and Dart. Master widgets, state management, and create cross-platform applications.",
      "category": "Mobile Development",
      "difficulty": "Intermediate",
      "duration": 98,
      "lessonCount": 10,
      "icon": "flutter",
      "color": "#02569b",
      "order": 24,
      "lessons": [
        {
          "id": "intro",
          "title": "Flutter & Dart Basics",
          "content": "Set up Flutter development environment, learn Dart language fundamentals, and create your first Flutter application.",
          "codeExample": "// Flutter installation and setup\n// 1. Download Flutter SDK from flutter.dev\n// 2. Add Flutter to PATH\n// 3. Run flutter doctor to check setup\n// 4. Install Android Studio/VS Code with Flutter plugin\n\n// Create new Flutter project\n// flutter create my_app\n// cd my_app\n// flutter run\n\n// Dart language basics\nvoid main() {\n  print('Hello, Dart!');\n  \n  // Variables\n  String name = 'Alice';\n  int age = 30;\n  double height = 5.6;\n  bool isStudent = true;\n  \n  // Collections\n  List<String> fruits = ['apple', 'banana', 'orange'];\n  Map<String, dynamic> person = {\n    'name': 'Bob',\n    'age': 25,\n    'skills': ['Flutter', 'Dart'],\n  };\n  \n  // Functions\n  String greet(String name) {\n    return 'Hello, $name!';\n  }\n  \n  // Classes\n  class User {\n    String name;\n    int age;\n    \n    User(this.name, this.age);\n    \n    void introduce() {\n      print('Hi, I\\'m $name and I\\'m $age years old.');\n    }\n  }\n  \n  User user = User('Charlie', 28);\n  user.introduce();\n}\n\n// lib/main.dart - Basic Flutter app\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Demo',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n        visualDensity: VisualDensity.adaptivePlatformDensity,\n      ),\n      home: MyHomePage(title: 'Flutter Demo Home Page'),\n      debugShowCheckedModeBanner: false,\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  MyHomePage({Key? key, required this.title}) : super(key: key);\n  \n  final String title;\n  \n  @override\n  _MyHomePageState createState() => _MyHomePageState();\n}\n\nclass _MyHomePageState extends State<MyHomePage> {\n  int _counter = 0;\n  \n  void _incrementCounter() {\n    setState(() {\n      _counter++;\n    });\n  }\n  \n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n        backgroundColor: Colors.blue,\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            Text(\n              'You have pushed the button this many times:',\n              style: Theme.of(context).textTheme.titleLarge,\n            ),\n            Text(\n              '$_counter',\n              style: Theme.of(context).textTheme.displayLarge,\n            ),\n            SizedBox(height: 20),\n            Container(\n              padding: EdgeInsets.all(16),\n              decoration: BoxDecoration(\n                color: Colors.blue.shade50,\n                borderRadius: BorderRadius.circular(10),\n              ),\n              child: Column(\n                children: [\n                  Icon(\n                    Icons.flutter_dash,\n                    size: 50,\n                    color: Colors.blue,\n                  ),\n                  SizedBox(height: 10),\n                  Text(\n                    'Welcome to Flutter!',\n                    style: TextStyle(\n                      fontSize: 18,\n                      fontWeight: FontWeight.bold,\n                      color: Colors.blue.shade800,\n                    ),\n                  ),\n                  Text(\n                    'Build beautiful apps for any screen',\n                    style: TextStyle(\n                      color: Colors.blue.shade600,\n                    ),\n                  ),\n                ],\n              ),\n            ),\n          ],\n        ),\n      ),\n      floatingActionButton: FloatingActionButton(\n        onPressed: _incrementCounter,\n        tooltip: 'Increment',\n        child: Icon(Icons.add),\n      ),\n    );\n  }\n}\n\n// Run Flutter app\n// flutter run\n// flutter run --release (for release mode)\n// flutter build apk (build Android APK)\n// flutter build ios (build iOS app)",
          "duration": 10
        }
      ]
    },
    {
      "id": "swift-fundamentals",
      "title": "Swift & iOS Development",
      "description": "Master Swift programming and iOS app development. Learn UIKit, SwiftUI, and publish apps to the App Store.",
      "category": "Mobile Development",
      "difficulty": "Intermediate",
      "duration": 105,
      "lessonCount": 10,
      "icon": "swift",
      "color": "#fa7343",
      "order": 25,
      "lessons": [
        {
          "id": "intro",
          "title": "Swift & Xcode Setup",
          "content": "Learn Swift language fundamentals and set up Xcode for iOS development. Understand iOS app architecture and development workflow.",
          "codeExample": "// Swift language basics\n// Xcode installation: Download from Mac App Store\n// Create new iOS project in Xcode\n\n// Variables and constants\nvar name = \"Alice\"  // Variable\nlet age = 30       // Constant\n\n// Explicit types\nvar height: Double = 5.6\nvar isStudent: Bool = true\n\n// String interpolation\nlet greeting = \"Hello, \\(name)! You are \\(age) years old.\"\nprint(greeting)\n\n// Arrays and Dictionaries\nvar fruits = [\"apple\", \"banana\", \"orange\"]\nvar person = [\"name\": \"Bob\", \"age\": \"25\"]\n\n// Optional values\nvar optionalName: String? = \"Charlie\"\nif let unwrappedName = optionalName {\n    print(\"Name is \\(unwrappedName)\")\n}\n\n// Functions\nfunc greet(name: String) -> String {\n    return \"Hello, \\(name)!\"\n}\n\nfunc add(a: Int, b: Int) -> Int {\n    return a + b\n}\n\n// Closures\nlet numbers = [1, 2, 3, 4, 5]\nlet doubled = numbers.map { $0 * 2 }\nprint(doubled) // [2, 4, 6, 8, 10]\n\n// Classes and Structs\nclass Person {\n    var name: String\n    var age: Int\n    \n    init(name: String, age: Int) {\n        self.name = name\n        self.age = age\n    }\n    \n    func introduce() {\n        print(\"Hi, I'm \\(name) and I'm \\(age) years old.\")\n    }\n}\n\nstruct Point {\n    var x: Double\n    var y: Double\n    \n    func distanceFromOrigin() -> Double {\n        return sqrt(x * x + y * y)\n    }\n}\n\n// Enums\nenum Direction {\n    case north, south, east, west\n    \n    func description() -> String {\n        switch self {\n        case .north: return \"Going North\"\n        case .south: return \"Going South\"\n        case .east: return \"Going East\"\n        case .west: return \"Going West\"\n        }\n    }\n}\n\n// Error handling\nenum ValidationError: Error {\n    case tooShort\n    case tooLong\n}\n\nfunc validatePassword(_ password: String) throws {\n    if password.count < 6 {\n        throw ValidationError.tooShort\n    }\n    if password.count > 20 {\n        throw ValidationError.tooLong\n    }\n}\n\ndo {\n    try validatePassword(\"secret\")\n    print(\"Password is valid\")\n} catch ValidationError.tooShort {\n    print(\"Password is too short\")\n} catch ValidationError.tooLong {\n    print(\"Password is too long\")\n}\n\n// iOS App Structure - ViewController.swift\nimport UIKit\n\nclass ViewController: UIViewController {\n    \n    @IBOutlet weak var nameLabel: UILabel!\n    @IBOutlet weak var nameTextField: UITextField!\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupUI()\n    }\n    \n    func setupUI() {\n        nameLabel.text = \"Welcome to iOS Development!\"\n        nameLabel.font = UIFont.systemFont(ofSize: 24, weight: .bold)\n        nameLabel.textAlignment = .center\n        \n        nameTextField.placeholder = \"Enter your name\"\n        nameTextField.borderStyle = .roundedRect\n    }\n    \n    @IBAction func greetButtonTapped(_ sender: UIButton) {\n        guard let name = nameTextField.text, !name.isEmpty else {\n            showAlert(message: \"Please enter a name\")\n            return\n        }\n        \n        nameLabel.text = \"Hello, \\(name)!\"\n        nameTextField.text = \"\"\n    }\n    \n    func showAlert(message: String) {\n        let alert = UIAlertController(\n            title: \"Alert\",\n            message: message,\n            preferredStyle: .alert\n        )\n        \n        alert.addAction(UIAlertAction(title: \"OK\", style: .default))\n        present(alert, animated: true)\n    }\n}\n\n// SwiftUI View\nimport SwiftUI\n\nstruct ContentView: View {\n    @State private var name = \"\"\n    @State private var greeting = \"Welcome to SwiftUI!\"\n    \n    var body: some View {\n        VStack(spacing: 20) {\n            Text(greeting)\n                .font(.title)\n                .fontWeight(.bold)\n                .multilineTextAlignment(.center)\n                .padding()\n            \n            TextField(\"Enter your name\", text: $name)\n                .textFieldStyle(RoundedBorderTextFieldStyle())\n                .padding(.horizontal)\n            \n            Button(\"Greet\") {\n                if !name.isEmpty {\n                    greeting = \"Hello, \\(name)!\"\n                    name = \"\"\n                } else {\n                    greeting = \"Please enter a name\"\n                }\n            }\n            .padding()\n            .background(Color.blue)\n            .foregroundColor(.white)\n            .cornerRadius(10)\n            \n            Spacer()\n        }\n        .padding()\n    }\n}\n\nstruct ContentView_Previews: PreviewProvider {\n    static var previews: some View {\n        ContentView()\n    }\n}",
          "duration": 12
        }
      ]
    },
    {
      "id": "kotlin-fundamentals",
      "title": "Kotlin & Android Development",
      "description": "Learn Kotlin programming and Android app development. Master Android SDK, Jetpack Compose, and publish to Google Play Store.",
      "category": "Mobile Development",
      "difficulty": "Intermediate",
      "duration": 95,
      "lessonCount": 9,
      "icon": "kotlin",
      "color": "#7f52ff",
      "order": 26,
      "lessons": [
        {
          "id": "intro",
          "title": "Kotlin & Android Studio Setup",
          "content": "Learn Kotlin language fundamentals and set up Android Studio for Android development. Understand Android app architecture and components.",
          "codeExample": "// Kotlin language basics\n// Install Android Studio from developer.android.com\n// Create new Android project\n\n// Variables and constants\nvar name = \"Alice\"  // Mutable\nval age = 30       // Immutable\n\n// Explicit types\nvar height: Double = 5.6\nvar isStudent: Boolean = true\n\n// String templates\nval greeting = \"Hello, $name! You are $age years old.\"\nprintln(greeting)\n\n// Nullable types\nvar optionalName: String? = \"Charlie\"\noptionalName?.let {\n    println(\"Name is $it\")\n}\n\n// Collections\nval fruits = listOf(\"apple\", \"banana\", \"orange\")\nval mutableFruits = mutableListOf(\"apple\", \"banana\")\nmutableFruits.add(\"orange\")\n\nval person = mapOf(\"name\" to \"Bob\", \"age\" to 25)\nval mutablePerson = mutableMapOf(\"name\" to \"Bob\")\nmutablePerson[\"age\"] = 25\n\n// Functions\nfun greet(name: String): String {\n    return \"Hello, $name!\"\n}\n\nfun add(a: Int, b: Int) = a + b  // Single expression function\n\n// Higher-order functions\nval numbers = listOf(1, 2, 3, 4, 5)\nval doubled = numbers.map { it * 2 }\nval evens = numbers.filter { it % 2 == 0 }\nprintln(doubled) // [2, 4, 6, 8, 10]\nprintln(evens)   // [2, 4]\n\n// Classes and objects\nclass Person(val name: String, var age: Int) {\n    fun introduce() {\n        println(\"Hi, I'm $name and I'm $age years old.\")\n    }\n    \n    fun haveBirthday() {\n        age++\n        println(\"Happy birthday! Now I'm $age.\")\n    }\n}\n\n// Data classes\ndata class User(val id: Int, val name: String, val email: String)\n\n// Sealed classes\nsealed class Result {\n    data class Success(val data: String) : Result()\n    data class Error(val exception: Throwable) : Result()\n    object Loading : Result()\n}\n\n// When expression\nfun handleResult(result: Result) {\n    when (result) {\n        is Result.Success -> println(\"Data: ${result.data}\")\n        is Result.Error -> println(\"Error: ${result.exception.message}\")\n        Result.Loading -> println(\"Loading...\")\n    }\n}\n\n// Extension functions\nfun String.removeWhitespace(): String {\n    return this.replace(\" \", \"\")\n}\n\nval text = \"Hello World\"\nprintln(text.removeWhitespace()) // \"HelloWorld\"\n\n// Android Activity with Kotlin\nimport android.os.Bundle\nimport android.widget.Button\nimport android.widget.EditText\nimport android.widget.TextView\nimport android.widget.Toast\nimport androidx.appcompat.app.AppCompatActivity\n\nclass MainActivity : AppCompatActivity() {\n    \n    private lateinit var nameEditText: EditText\n    private lateinit var greetButton: Button\n    private lateinit var resultTextView: TextView\n    \n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        \n        initViews()\n        setupListeners()\n    }\n    \n    private fun initViews() {\n        nameEditText = findViewById(R.id.nameEditText)\n        greetButton = findViewById(R.id.greetButton)\n        resultTextView = findViewById(R.id.resultTextView)\n        \n        resultTextView.text = \"Welcome to Android Development!\"\n    }\n    \n    private fun setupListeners() {\n        greetButton.setOnClickListener {\n            val name = nameEditText.text.toString().trim()\n            \n            if (name.isNotEmpty()) {\n                resultTextView.text = \"Hello, $name!\"\n                nameEditText.text.clear()\n            } else {\n                Toast.makeText(this, \"Please enter a name\", Toast.LENGTH_SHORT).show()\n            }\n        }\n    }\n}\n\n// Jetpack Compose UI\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.material3.*\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\n\n@Composable\nfun GreetingScreen() {\n    var name by remember { mutableStateOf(\"\") }\n    var greeting by remember { mutableStateOf(\"Welcome to Jetpack Compose!\") }\n    \n    Column(\n        modifier = Modifier\n            .fillMaxSize()\n            .padding(16.dp),\n        horizontalAlignment = Alignment.CenterHorizontally,\n        verticalArrangement = Arrangement.Center\n    ) {\n        Text(\n            text = greeting,\n            fontSize = 24.sp,\n            fontWeight = FontWeight.Bold,\n            modifier = Modifier.padding(bottom = 16.dp)\n        )\n        \n        OutlinedTextField(\n            value = name,\n            onValueChange = { name = it },\n            label = { Text(\"Enter your name\") },\n            modifier = Modifier\n                .fillMaxWidth()\n                .padding(bottom = 16.dp)\n        )\n        \n        Button(\n            onClick = {\n                greeting = if (name.isNotEmpty()) {\n                    \"Hello, $name!\"\n                } else {\n                    \"Please enter a name\"\n                }\n                name = \"\"\n            },\n            modifier = Modifier.fillMaxWidth()\n        ) {\n            Text(\"Greet\")\n        }\n    }\n}\n\n// Fragment example\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport androidx.fragment.app.Fragment\n\nclass HomeFragment : Fragment() {\n    \n    override fun onCreateView(\n        inflater: LayoutInflater,\n        container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        return inflater.inflate(R.layout.fragment_home, container, false)\n    }\n    \n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        \n        // Initialize views and setup listeners\n        setupUI(view)\n    }\n    \n    private fun setupUI(view: View) {\n        // View initialization logic\n    }\n}",
          "duration": 11
        }
      ]
    },
    {
      "id": "aws-fundamentals",
      "title": "AWS Cloud Platform",
      "description": "Master Amazon Web Services cloud computing. Learn EC2, S3, Lambda, RDS, and deploy scalable applications to AWS.",
      "category": "Cloud Platform",
      "difficulty": "Intermediate",
      "duration": 110,
      "lessonCount": 10,
      "icon": "aws",
      "color": "#ff9900",
      "order": 27,
      "lessons": [
        {
          "id": "intro",
          "title": "AWS Basics & Account Setup",
          "content": "Introduction to AWS cloud services, create AWS account, understand regions and availability zones, and set up AWS CLI.",
          "codeExample": "# AWS CLI Installation and Setup\n# Download AWS CLI from aws.amazon.com/cli/\n# Or use package manager:\n# macOS: brew install awscli\n# Windows: Download MSI installer\n# Linux: pip install awscli\n\n# Configure AWS CLI\naws configure\n# Access Key ID: [Your Access Key]\n# Secret Access Key: [Your Secret Key]\n# Default region: us-east-1\n# Default output format: json\n\n# Verify configuration\naws sts get-caller-identity\naws ec2 describe-regions\n\n# AWS Regions and Availability Zones\n# List all regions\naws ec2 describe-regions --query 'Regions[].RegionName' --output table\n\n# List availability zones in a region\naws ec2 describe-availability-zones --region us-east-1\n\n# Basic AWS SDK for Node.js\nnpm install aws-sdk\n\n// aws-config.js\nconst AWS = require('aws-sdk');\n\n// Configure AWS SDK\nAWS.config.update({\n  accessKeyId: process.env.AWS_ACCESS_KEY_ID,\n  secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,\n  region: 'us-east-1'\n});\n\n// Create service instances\nconst s3 = new AWS.S3();\nconst ec2 = new AWS.EC2();\nconst lambda = new AWS.Lambda();\nconst rds = new AWS.RDS();\n\nmodule.exports = { s3, ec2, lambda, rds };\n\n// Basic operations examples\n// List S3 buckets\nasync function listBuckets() {\n  try {\n    const result = await s3.listBuckets().promise();\n    console.log('S3 Buckets:', result.Buckets);\n    return result.Buckets;\n  } catch (error) {\n    console.error('Error listing buckets:', error);\n    throw error;\n  }\n}\n\n// List EC2 instances\nasync function listInstances() {\n  try {\n    const result = await ec2.describeInstances().promise();\n    const instances = [];\n    \n    result.Reservations.forEach(reservation => {\n      reservation.Instances.forEach(instance => {\n        instances.push({\n          id: instance.InstanceId,\n          type: instance.InstanceType,\n          state: instance.State.Name,\n          publicIp: instance.PublicIpAddress,\n          privateIp: instance.PrivateIpAddress\n        });\n      });\n    });\n    \n    console.log('EC2 Instances:', instances);\n    return instances;\n  } catch (error) {\n    console.error('Error listing instances:', error);\n    throw error;\n  }\n}\n\n// AWS CLI Common Commands\n# S3 Operations\naws s3 ls                                    # List buckets\naws s3 mb s3://my-bucket-name               # Create bucket\naws s3 cp file.txt s3://my-bucket/          # Upload file\naws s3 sync ./local-folder s3://my-bucket/  # Sync folder\naws s3 rm s3://my-bucket/file.txt           # Delete file\n\n# EC2 Operations\naws ec2 describe-instances                   # List instances\naws ec2 describe-images --owners self        # List AMIs\naws ec2 describe-key-pairs                   # List key pairs\naws ec2 describe-security-groups             # List security groups\n\n# Lambda Operations\naws lambda list-functions                    # List functions\naws lambda invoke --function-name my-function output.json\n\n# CloudFormation\naws cloudformation list-stacks              # List stacks\naws cloudformation describe-stacks --stack-name my-stack\n\n# IAM Operations\naws iam list-users                          # List users\naws iam list-roles                          # List roles\naws iam list-policies                       # List policies\n\n# Environment Variables\nexport AWS_ACCESS_KEY_ID=your_access_key\nexport AWS_SECRET_ACCESS_KEY=your_secret_key\nexport AWS_DEFAULT_REGION=us-east-1\n\n# AWS Credentials file (~/.aws/credentials)\n[default]\naws_access_key_id = your_access_key\naws_secret_access_key = your_secret_key\n\n[production]\naws_access_key_id = prod_access_key\naws_secret_access_key = prod_secret_key\n\n# AWS Config file (~/.aws/config)\n[default]\nregion = us-east-1\noutput = json\n\n[profile production]\nregion = us-west-2\noutput = table",
          "duration": 10
        },
        {
          "id": "ec2",
          "title": "EC2 Virtual Servers",
          "content": "Launch and manage EC2 instances, configure security groups, key pairs, and understand instance types and pricing models.",
          "codeExample": "# EC2 Instance Management\n\n# Launch an EC2 instance\naws ec2 run-instances \\\n  --image-id ami-0abcdef1234567890 \\\n  --count 1 \\\n  --instance-type t2.micro \\\n  --key-name my-key-pair \\\n  --security-group-ids sg-1234567890abcdef0 \\\n  --subnet-id subnet-1234567890abcdef0 \\\n  --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=MyWebServer}]'\n\n# Create a key pair\naws ec2 create-key-pair --key-name my-key-pair --query 'KeyMaterial' --output text > my-key-pair.pem\nchmod 400 my-key-pair.pem\n\n# Create security group\naws ec2 create-security-group \\\n  --group-name my-security-group \\\n  --description \"My security group\"\n\n# Add rules to security group\naws ec2 authorize-security-group-ingress \\\n  --group-id sg-1234567890abcdef0 \\\n  --protocol tcp \\\n  --port 22 \\\n  --cidr 0.0.0.0/0  # SSH access\n\naws ec2 authorize-security-group-ingress \\\n  --group-id sg-1234567890abcdef0 \\\n  --protocol tcp \\\n  --port 80 \\\n  --cidr 0.0.0.0/0  # HTTP access\n\naws ec2 authorize-security-group-ingress \\\n  --group-id sg-1234567890abcdef0 \\\n  --protocol tcp \\\n  --port 443 \\\n  --cidr 0.0.0.0/0  # HTTPS access\n\n# Connect to instance\nssh -i my-key-pair.pem ec2-user@your-instance-public-ip\n\n# User data script for instance initialization\n#!/bin/bash\nyum update -y\nyum install -y httpd\nsystemctl start httpd\nsystemctl enable httpd\necho '<h1>Hello from AWS EC2!</h1>' > /var/www/html/index.html\n\n# Launch instance with user data\naws ec2 run-instances \\\n  --image-id ami-0abcdef1234567890 \\\n  --count 1 \\\n  --instance-type t2.micro \\\n  --key-name my-key-pair \\\n  --security-group-ids sg-1234567890abcdef0 \\\n  --user-data file://userdata.sh\n\n// Node.js EC2 Management\nconst { ec2 } = require('./aws-config');\n\n// Launch EC2 instance\nasync function launchInstance() {\n  const params = {\n    ImageId: 'ami-0abcdef1234567890',\n    MinCount: 1,\n    MaxCount: 1,\n    InstanceType: 't2.micro',\n    KeyName: 'my-key-pair',\n    SecurityGroupIds: ['sg-1234567890abcdef0'],\n    TagSpecifications: [\n      {\n        ResourceType: 'instance',\n        Tags: [\n          {\n            Key: 'Name',\n            Value: 'MyWebServer'\n          },\n          {\n            Key: 'Environment',\n            Value: 'Development'\n          }\n        ]\n      }\n    ],\n    UserData: Buffer.from(`#!/bin/bash\n      yum update -y\n      yum install -y httpd nodejs npm\n      systemctl start httpd\n      systemctl enable httpd\n      \n      # Create a simple Node.js app\n      cat > /home/ec2-user/app.js << 'EOF'\n      const http = require('http');\n      const server = http.createServer((req, res) => {\n        res.writeHead(200, {'Content-Type': 'text/html'});\n        res.end('<h1>Hello from Node.js on AWS EC2!</h1>');\n      });\n      server.listen(3000, () => {\n        console.log('Server running on port 3000');\n      });\n      EOF\n      \n      # Start Node.js app\n      cd /home/ec2-user\n      nohup node app.js > app.log 2>&1 &\n    `).toString('base64')\n  };\n\n  try {\n    const result = await ec2.runInstances(params).promise();\n    console.log('Instance launched:', result.Instances[0].InstanceId);\n    return result.Instances[0];\n  } catch (error) {\n    console.error('Error launching instance:', error);\n    throw error;\n  }\n}\n\n// Terminate instance\nasync function terminateInstance(instanceId) {\n  const params = {\n    InstanceIds: [instanceId]\n  };\n\n  try {\n    const result = await ec2.terminateInstances(params).promise();\n    console.log('Instance terminated:', result.TerminatingInstances);\n    return result.TerminatingInstances;\n  } catch (error) {\n    console.error('Error terminating instance:', error);\n    throw error;\n  }\n}\n\n// Get instance status\nasync function getInstanceStatus(instanceId) {\n  const params = {\n    InstanceIds: [instanceId]\n  };\n\n  try {\n    const result = await ec2.describeInstanceStatus(params).promise();\n    return result.InstanceStatuses[0];\n  } catch (error) {\n    console.error('Error getting instance status:', error);\n    throw error;\n  }\n}\n\n// Create and attach EBS volume\nasync function createAndAttachVolume(instanceId, availabilityZone) {\n  // Create volume\n  const createParams = {\n    Size: 10,  // 10 GB\n    VolumeType: 'gp3',\n    AvailabilityZone: availabilityZone,\n    TagSpecifications: [\n      {\n        ResourceType: 'volume',\n        Tags: [\n          {\n            Key: 'Name',\n            Value: 'MyDataVolume'\n          }\n        ]\n      }\n    ]\n  };\n\n  try {\n    const createResult = await ec2.createVolume(createParams).promise();\n    const volumeId = createResult.VolumeId;\n    console.log('Volume created:', volumeId);\n\n    // Wait for volume to be available\n    await ec2.waitFor('volumeAvailable', { VolumeIds: [volumeId] }).promise();\n\n    // Attach volume\n    const attachParams = {\n      VolumeId: volumeId,\n      InstanceId: instanceId,\n      Device: '/dev/sdf'\n    };\n\n    const attachResult = await ec2.attachVolume(attachParams).promise();\n    console.log('Volume attached:', attachResult);\n    return { volumeId, attachResult };\n  } catch (error) {\n    console.error('Error creating/attaching volume:', error);\n    throw error;\n  }\n}\n\n# Instance monitoring and management\naws ec2 describe-instances --query 'Reservations[*].Instances[*].[InstanceId,State.Name,InstanceType,PublicIpAddress]' --output table\n\n# Stop instance\naws ec2 stop-instances --instance-ids i-1234567890abcdef0\n\n# Start instance\naws ec2 start-instances --instance-ids i-1234567890abcdef0\n\n# Reboot instance\naws ec2 reboot-instances --instance-ids i-1234567890abcdef0\n\n# Create AMI from instance\naws ec2 create-image --instance-id i-1234567890abcdef0 --name \"My Custom AMI\" --description \"AMI created from my instance\"",
          "duration": 12
        }
      ]
    },
    {
      "id": "gcp-fundamentals",
      "title": "Google Cloud Platform",
      "description": "Master Google Cloud Platform services. Learn Compute Engine, Cloud Storage, Cloud Functions, and deploy applications to GCP.",
      "category": "Cloud Platform",
      "difficulty": "Intermediate",
      "duration": 95,
      "lessonCount": 3,
      "icon": "gcp",
      "color": "#4285f4",
      "order": 28,
      "lessons": [
        {
          "id": "intro",
          "title": "GCP Setup & gcloud CLI",
          "content": "Introduction to Google Cloud Platform, create GCP account, set up billing, and configure gcloud CLI for development.",
          "codeExample": "# Google Cloud CLI Installation\n# Download from cloud.google.com/sdk/\n# Or use package manager:\n# macOS: brew install google-cloud-sdk\n# Windows: Download installer\n# Linux: curl https://sdk.cloud.google.com | bash\n\n# Initialize gcloud\ngcloud init\n# Follow authentication flow\n# Select or create project\n# Choose default region/zone\n\n# Authentication\ngcloud auth login\ngcloud auth application-default login\n\n# Project management\ngcloud projects list\ngcloud config set project PROJECT_ID\ngcloud config get-value project\n\n# Enable APIs\ngcloud services enable compute.googleapis.com\ngcloud services enable storage.googleapis.com\ngcloud services enable cloudfunctions.googleapis.com\ngcloud services enable cloudrun.googleapis.com\n\n# Basic configuration\ngcloud config set compute/region us-central1\ngcloud config set compute/zone us-central1-a\n\n# List available regions and zones\ngcloud compute regions list\ngcloud compute zones list\n\n// Node.js with Google Cloud Client Libraries\nnpm install @google-cloud/storage @google-cloud/compute @google-cloud/functions-framework\n\n// gcp-config.js\nconst {Storage} = require('@google-cloud/storage');\nconst {InstancesClient} = require('@google-cloud/compute');\n\n// Initialize clients\nconst storage = new Storage({\n  projectId: 'your-project-id',\n  keyFilename: 'path/to/service-account-key.json' // Optional if using default credentials\n});\n\nconst computeClient = new InstancesClient();\n\nmodule.exports = { storage, computeClient };\n\n// Service Account setup\ngcloud iam service-accounts create my-service-account \\\n    --description=\"My service account\" \\\n    --display-name=\"My Service Account\"\n\n# Grant roles to service account\ngcloud projects add-iam-policy-binding PROJECT_ID \\\n    --member=\"serviceAccount:my-service-account@PROJECT_ID.iam.gserviceaccount.com\" \\\n    --role=\"roles/storage.admin\"\n\n# Create and download key\ngcloud iam service-accounts keys create ~/key.json \\\n    --iam-account=my-service-account@PROJECT_ID.iam.gserviceaccount.com\n\n# Set environment variable\nexport GOOGLE_APPLICATION_CREDENTIALS=\"~/key.json\"\n\n// Basic operations\n// List Cloud Storage buckets\nasync function listBuckets() {\n  try {\n    const [buckets] = await storage.getBuckets();\n    console.log('Buckets:');\n    buckets.forEach(bucket => {\n      console.log(`  ${bucket.name}`);\n    });\n    return buckets;\n  } catch (error) {\n    console.error('Error listing buckets:', error);\n    throw error;\n  }\n}\n\n// Create bucket\nasync function createBucket(bucketName) {\n  try {\n    const [bucket] = await storage.createBucket(bucketName, {\n      location: 'US',\n      storageClass: 'STANDARD'\n    });\n    console.log(`Bucket ${bucket.name} created.`);\n    return bucket;\n  } catch (error) {\n    console.error('Error creating bucket:', error);\n    throw error;\n  }\n}\n\n// Upload file to bucket\nasync function uploadFile(bucketName, filePath, destination) {\n  try {\n    await storage.bucket(bucketName).upload(filePath, {\n      destination: destination,\n    });\n    console.log(`${filePath} uploaded to ${bucketName}/${destination}`);\n  } catch (error) {\n    console.error('Error uploading file:', error);\n    throw error;\n  }\n}\n\n# gcloud common commands\n# Cloud Storage\ngsutil ls                              # List buckets\ngsutil mb gs://my-bucket-name         # Create bucket\ngsutil cp file.txt gs://my-bucket/    # Upload file\ngsutil cp gs://my-bucket/file.txt .   # Download file\ngsutil rsync -r ./folder gs://my-bucket/folder  # Sync folder\n\n# Compute Engine\ngcloud compute instances list          # List instances\ngcloud compute instances create my-instance \\\n  --image-family=ubuntu-2004-lts \\\n  --image-project=ubuntu-os-cloud \\\n  --machine-type=e2-micro \\\n  --zone=us-central1-a\n\n# Cloud Functions\ngcloud functions list                  # List functions\ngcloud functions deploy my-function \\\n  --runtime nodejs16 \\\n  --trigger-http \\\n  --allow-unauthenticated\n\n# Cloud Run\ngcloud run services list               # List services\ngcloud run deploy my-service \\\n  --image gcr.io/PROJECT_ID/my-app \\\n  --platform managed \\\n  --region us-central1",
          "duration": 10
        }
      ]
    },
    {
      "id": "azure-fundamentals",
      "title": "Microsoft Azure",
      "description": "Learn Microsoft Azure cloud platform. Master Azure Virtual Machines, Storage, Functions, and deploy applications to Azure.",
      "category": "Cloud Platform",
      "difficulty": "Intermediate",
      "duration": 88,
      "lessonCount": 2,
      "icon": "azure",
      "color": "#0078d4",
      "order": 29,
      "lessons": [
        {
          "id": "intro",
          "title": "Azure Setup & CLI",
          "content": "Introduction to Microsoft Azure, create Azure account, set up Azure CLI, and understand Azure resource management.",
          "codeExample": "# Azure CLI Installation\n# Download from docs.microsoft.com/en-us/cli/azure/\n# Or use package manager:\n# macOS: brew install azure-cli\n# Windows: winget install Microsoft.AzureCLI\n# Linux: curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash\n\n# Login to Azure\naz login\n# Opens browser for authentication\n\n# List subscriptions\naz account list --output table\naz account set --subscription \"Your Subscription Name\"\n\n# Resource group management\naz group list\naz group create --name myResourceGroup --location eastus\n\n# Available locations\naz account list-locations --output table\n\n# Azure PowerShell (alternative)\n# Install-Module -Name Az -AllowClobber -Scope CurrentUser\n# Connect-AzAccount\n\n// Node.js with Azure SDK\nnpm install @azure/storage-blob @azure/arm-compute @azure/identity\n\n// azure-config.js\nconst { DefaultAzureCredential } = require('@azure/identity');\nconst { BlobServiceClient } = require('@azure/storage-blob');\nconst { ComputeManagementClient } = require('@azure/arm-compute');\n\n// Credential setup\nconst credential = new DefaultAzureCredential();\nconst subscriptionId = 'your-subscription-id';\n\n// Initialize clients\nconst blobServiceClient = new BlobServiceClient(\n  'https://yourstorageaccount.blob.core.windows.net',\n  credential\n);\n\nconst computeClient = new ComputeManagementClient(\n  credential,\n  subscriptionId\n);\n\nmodule.exports = { blobServiceClient, computeClient };\n\n// Environment variables\nprocess.env.AZURE_CLIENT_ID = 'your-client-id';\nprocess.env.AZURE_CLIENT_SECRET = 'your-client-secret';\nprocess.env.AZURE_TENANT_ID = 'your-tenant-id';\nprocess.env.AZURE_SUBSCRIPTION_ID = 'your-subscription-id';\n\n// Service Principal creation\naz ad sp create-for-rbac --name \"myApp\" --role contributor \\\n    --scopes /subscriptions/{subscription-id}/resourceGroups/{resource-group}\n\n// Basic operations\n// List storage accounts\nasync function listStorageAccounts() {\n  try {\n    const containerClient = blobServiceClient.getContainerClient('mycontainer');\n    const exists = await containerClient.exists();\n    \n    if (exists) {\n      console.log('Container exists');\n      for await (const blob of containerClient.listBlobsFlat()) {\n        console.log(`Blob: ${blob.name}`);\n      }\n    }\n  } catch (error) {\n    console.error('Error:', error);\n  }\n}\n\n// Upload blob\nasync function uploadBlob(containerName, blobName, data) {\n  try {\n    const containerClient = blobServiceClient.getContainerClient(containerName);\n    const blockBlobClient = containerClient.getBlockBlobClient(blobName);\n    \n    const uploadResponse = await blockBlobClient.upload(data, data.length);\n    console.log(`Upload successful: ${uploadResponse.requestId}`);\n  } catch (error) {\n    console.error('Upload failed:', error);\n  }\n}\n\n# Azure CLI common commands\n# Virtual Machines\naz vm list --output table\naz vm create \\\n  --resource-group myResourceGroup \\\n  --name myVM \\\n  --image UbuntuLTS \\\n  --admin-username azureuser \\\n  --generate-ssh-keys\n\n# Storage\naz storage account list --output table\naz storage account create \\\n  --name mystorageaccount \\\n  --resource-group myResourceGroup \\\n  --location eastus \\\n  --sku Standard_LRS\n\n# App Service\naz webapp list --output table\naz webapp create \\\n  --resource-group myResourceGroup \\\n  --plan myAppServicePlan \\\n  --name myWebApp \\\n  --runtime \"NODE|16-lts\"\n\n# Azure Functions\naz functionapp list --output table\naz functionapp create \\\n  --resource-group myResourceGroup \\\n  --consumption-plan-location eastus \\\n  --runtime node \\\n  --functions-version 4 \\\n  --name myFunctionApp \\\n  --storage-account mystorageaccount\n\n# Container Instances\naz container create \\\n  --resource-group myResourceGroup \\\n  --name mycontainer \\\n  --image nginx \\\n  --dns-name-label mycontainer \\\n  --ports 80\n\n# Monitor resources\naz monitor metrics list \\\n  --resource /subscriptions/{subscription}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM \\\n  --metric \"Percentage CPU\"\n\n# Clean up\naz group delete --name myResourceGroup --yes --no-wait",
          "duration": 12
        }
      ]
    },
    {
      "id": "digitalocean-fundamentals",
      "title": "DigitalOcean Cloud",
      "description": "Learn DigitalOcean cloud platform. Master Droplets, Spaces, App Platform, and deploy applications cost-effectively.",
      "category": "Cloud Platform",
      "difficulty": "Beginner",
      "duration": 65,
      "lessonCount": 1,
      "icon": "digitalocean",
      "color": "#0080ff",
      "order": 30,
      "lessons": [
        {
          "id": "intro",
          "title": "DigitalOcean Setup & doctl CLI",
          "content": "Introduction to DigitalOcean, create account, set up doctl CLI, and understand DigitalOcean's simple cloud infrastructure.",
          "codeExample": "# DigitalOcean CLI (doctl) Installation\n# Download from github.com/digitalocean/doctl/releases\n# Or use package manager:\n# macOS: brew install doctl\n# Windows: scoop install doctl\n# Linux: snap install doctl\n\n# Authentication\ndoctl auth init\n# Enter your API token from DigitalOcean dashboard\n\n# Verify authentication\ndoctl account get\n\n# List available regions\ndoctl compute region list\n\n# List available sizes\ndoctl compute size list\n\n# List available images\ndoctl compute image list --public\n\n// Node.js with DigitalOcean API\nnpm install digitalocean\n\n// do-config.js\nconst DigitalOcean = require('digitalocean');\n\nconst client = DigitalOcean({\n  token: process.env.DIGITALOCEAN_ACCESS_TOKEN\n});\n\nmodule.exports = client;\n\n// Basic operations\n// List droplets\nasync function listDroplets() {\n  try {\n    const droplets = await client.droplets.list();\n    console.log('Droplets:', droplets.body.droplets);\n    return droplets.body.droplets;\n  } catch (error) {\n    console.error('Error listing droplets:', error);\n    throw error;\n  }\n}\n\n// Create droplet\nasync function createDroplet() {\n  const dropletConfig = {\n    name: 'my-web-server',\n    region: 'nyc3',\n    size: 's-1vcpu-1gb',\n    image: 'ubuntu-20-04-x64',\n    ssh_keys: [], // Add your SSH key IDs\n    backups: false,\n    ipv6: true,\n    user_data: `#!/bin/bash\n      apt update\n      apt install -y nginx nodejs npm\n      systemctl start nginx\n      systemctl enable nginx\n      \n      # Create simple Node.js app\n      cat > /home/app.js << 'EOF'\n      const http = require('http');\n      const server = http.createServer((req, res) => {\n        res.writeHead(200, {'Content-Type': 'text/html'});\n        res.end('<h1>Hello from DigitalOcean Droplet!</h1>');\n      });\n      server.listen(3000, () => {\n        console.log('Server running on port 3000');\n      });\n      EOF\n      \n      cd /home\n      nohup node app.js > app.log 2>&1 &\n    `,\n    tags: ['web-server', 'nodejs']\n  };\n\n  try {\n    const droplet = await client.droplets.create(dropletConfig);\n    console.log('Droplet created:', droplet.body.droplet);\n    return droplet.body.droplet;\n  } catch (error) {\n    console.error('Error creating droplet:', error);\n    throw error;\n  }\n}\n\n// Spaces (Object Storage)\nasync function listSpaces() {\n  try {\n    const spaces = await client.spaces.list();\n    console.log('Spaces:', spaces.body.spaces);\n    return spaces.body.spaces;\n  } catch (error) {\n    console.error('Error listing spaces:', error);\n    throw error;\n  }\n}\n\n# doctl common commands\n# Droplets (Virtual Machines)\ndoctl compute droplet list\ndoctl compute droplet create my-droplet \\\n  --region nyc3 \\\n  --image ubuntu-20-04-x64 \\\n  --size s-1vcpu-1gb \\\n  --ssh-keys your-ssh-key-id\n\n# SSH Keys\ndoctl compute ssh-key list\ndoctl compute ssh-key import my-key --public-key-file ~/.ssh/id_rsa.pub\n\n# Domains & DNS\ndoctl compute domain list\ndoctl compute domain create example.com\ndoctl compute domain records list example.com\ndoctl compute domain records create example.com \\\n  --record-type A \\\n  --record-name @ \\\n  --record-data 192.168.1.1\n\n# Volumes (Block Storage)\ndoctl compute volume list\ndoctl compute volume create my-volume \\\n  --region nyc3 \\\n  --size 10GiB\ndoctl compute volume-action attach my-volume droplet-id\n\n# Load Balancers\ndoctl compute load-balancer list\ndoctl compute load-balancer create \\\n  --name my-lb \\\n  --region nyc3 \\\n  --forwarding-rules entry_protocol:http,entry_port:80,target_protocol:http,target_port:80 \\\n  --droplet-ids droplet-id-1,droplet-id-2\n\n# Kubernetes\ndoctl kubernetes cluster list\ndoctl kubernetes cluster create my-cluster \\\n  --region nyc3 \\\n  --version 1.24.8-do.0 \\\n  --node-pool \"name=worker-pool;size=s-2vcpu-2gb;count=3\"\n\n# App Platform\ndoctl apps list\ndoctl apps create --spec app.yaml\n\n# Sample app.yaml for App Platform\n# name: my-app\n# services:\n# - name: web\n#   source_dir: /\n#   github:\n#     repo: your-username/your-repo\n#     branch: main\n#   run_command: npm start\n#   environment_slug: node-js\n#   instance_count: 1\n#   instance_size_slug: basic-xxs\n#   routes:\n#   - path: /\n\n# Spaces (Object Storage)\ndoctl compute cdn list\ndoctl spaces ls\n# Note: Spaces operations require s3cmd or aws cli configured with DO credentials\n\n# Monitoring\ndoctl monitoring alert-policy list\ndoctl monitoring droplet-bandwidth droplet-id\n\n# Billing\ndoctl invoice list\ndoctl balance get\n\n# Snapshots and Backups\ndoctl compute droplet-action snapshot droplet-id --snapshot-name my-snapshot\ndoctl compute snapshot list\n\n# Firewalls\ndoctl compute firewall list\ndoctl compute firewall create \\\n  --name my-firewall \\\n  --inbound-rules protocol:tcp,ports:22,address:0.0.0.0/0 \\\n  --inbound-rules protocol:tcp,ports:80,address:0.0.0.0/0 \\\n  --inbound-rules protocol:tcp,ports:443,address:0.0.0.0/0\n\n# Projects\ndoctl projects list\ndoctl projects create --name \"My Project\" --description \"My awesome project\"",
          "duration": 8
        }
      ]
    },
    {
      "id": "mongodb-fundamentals",
      "title": "MongoDB NoSQL Database",
      "description": "Master MongoDB NoSQL database. Learn document-based data modeling, CRUD operations, indexing, and aggregation pipelines.",
      "category": "Database",
      "difficulty": "Intermediate",
      "duration": 85,
      "lessonCount": 2,
      "icon": "mongodb",
      "color": "#47a248",
      "order": 31,
      "lessons": [
        {
          "id": "intro",
          "title": "MongoDB Setup & Basics",
          "content": "Install MongoDB, understand document-based data model, and learn basic CRUD operations with MongoDB shell and drivers.",
          "codeExample": "# MongoDB Installation\n# Download from mongodb.com/try/download/community\n# Or use package manager:\n# macOS: brew install mongodb-community\n# Ubuntu: sudo apt install mongodb\n# Windows: Download MSI installer\n\n# Start MongoDB service\nsudo systemctl start mongod  # Linux\nbrew services start mongodb-community  # macOS\n# Windows: Start as service or run mongod.exe\n\n# Connect to MongoDB shell\nmongo\n# or for newer versions:\nmongosh\n\n// MongoDB Shell Commands\n// Show databases\nshow dbs\n\n// Create/Switch to database\nuse myapp\n\n// Show collections\nshow collections\n\n// Create collection and insert documents\ndb.users.insertOne({\n  name: \"Alice Johnson\",\n  email: \"alice@example.com\",\n  age: 28,\n  skills: [\"JavaScript\", \"Python\", \"MongoDB\"],\n  address: {\n    street: \"123 Main St\",\n    city: \"New York\",\n    zipcode: \"10001\"\n  },\n  createdAt: new Date()\n})\n\n// Insert multiple documents\ndb.users.insertMany([\n  {\n    name: \"Bob Smith\",\n    email: \"bob@example.com\",\n    age: 32,\n    skills: [\"Java\", \"Spring Boot\", \"SQL\"],\n    address: {\n      street: \"456 Oak Ave\",\n      city: \"Los Angeles\",\n      zipcode: \"90210\"\n    },\n    createdAt: new Date()\n  },\n  {\n    name: \"Charlie Brown\",\n    email: \"charlie@example.com\",\n    age: 25,\n    skills: [\"React\", \"Node.js\", \"GraphQL\"],\n    address: {\n      street: \"789 Pine Rd\",\n      city: \"Chicago\",\n      zipcode: \"60601\"\n    },\n    createdAt: new Date()\n  }\n])\n\n// Find documents\ndb.users.find()  // Find all\ndb.users.find().pretty()  // Formatted output\ndb.users.findOne({name: \"Alice Johnson\"})  // Find one\ndb.users.find({age: {$gte: 30}})  // Find users >= 30 years old\ndb.users.find({skills: \"JavaScript\"})  // Find users with JavaScript skill\ndb.users.find({\"address.city\": \"New York\"})  // Query nested field\n\n// Update documents\ndb.users.updateOne(\n  {email: \"alice@example.com\"},\n  {$set: {age: 29, lastLogin: new Date()}}\n)\n\ndb.users.updateMany(\n  {age: {$lt: 30}},\n  {$set: {category: \"young professional\"}}\n)\n\n// Delete documents\ndb.users.deleteOne({email: \"test@example.com\"})\ndb.users.deleteMany({age: {$lt: 18}})\n\n// Indexing\ndb.users.createIndex({email: 1})  // Ascending index\ndb.users.createIndex({age: -1})   // Descending index\ndb.users.createIndex({\"address.city\": 1, age: 1})  // Compound index\ndb.users.getIndexes()  // List all indexes\n\n// Node.js with MongoDB\nnpm install mongodb\n\n// mongodb-config.js\nconst { MongoClient } = require('mongodb');\n\nconst uri = 'mongodb://localhost:27017';\nconst client = new MongoClient(uri);\n\nasync function connectDB() {\n  try {\n    await client.connect();\n    console.log('Connected to MongoDB');\n    return client.db('myapp');\n  } catch (error) {\n    console.error('MongoDB connection error:', error);\n    throw error;\n  }\n}\n\nmodule.exports = { connectDB, client };\n\n// User operations\nconst { connectDB } = require('./mongodb-config');\n\nclass UserService {\n  constructor() {\n    this.db = null;\n    this.collection = null;\n  }\n\n  async init() {\n    this.db = await connectDB();\n    this.collection = this.db.collection('users');\n  }\n\n  async createUser(userData) {\n    try {\n      const result = await this.collection.insertOne({\n        ...userData,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      });\n      return result.insertedId;\n    } catch (error) {\n      console.error('Error creating user:', error);\n      throw error;\n    }\n  }\n\n  async findUser(query) {\n    try {\n      return await this.collection.findOne(query);\n    } catch (error) {\n      console.error('Error finding user:', error);\n      throw error;\n    }\n  }\n\n  async findUsers(query = {}, options = {}) {\n    try {\n      const cursor = this.collection.find(query, options);\n      return await cursor.toArray();\n    } catch (error) {\n      console.error('Error finding users:', error);\n      throw error;\n    }\n  }\n\n  async updateUser(filter, update) {\n    try {\n      const result = await this.collection.updateOne(\n        filter,\n        { $set: { ...update, updatedAt: new Date() } }\n      );\n      return result;\n    } catch (error) {\n      console.error('Error updating user:', error);\n      throw error;\n    }\n  }\n\n  async deleteUser(filter) {\n    try {\n      const result = await this.collection.deleteOne(filter);\n      return result;\n    } catch (error) {\n      console.error('Error deleting user:', error);\n      throw error;\n    }\n  }\n\n  async getUsersByAge(minAge, maxAge) {\n    try {\n      return await this.collection.find({\n        age: { $gte: minAge, $lte: maxAge }\n      }).toArray();\n    } catch (error) {\n      console.error('Error finding users by age:', error);\n      throw error;\n    }\n  }\n\n  async getUsersBySkill(skill) {\n    try {\n      return await this.collection.find({\n        skills: skill\n      }).toArray();\n    } catch (error) {\n      console.error('Error finding users by skill:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage example\nasync function main() {\n  const userService = new UserService();\n  await userService.init();\n\n  // Create users\n  const userId = await userService.createUser({\n    name: \"David Wilson\",\n    email: \"david@example.com\",\n    age: 35,\n    skills: [\"Python\", \"Django\", \"PostgreSQL\"]\n  });\n\n  // Find user\n  const user = await userService.findUser({ email: \"david@example.com\" });\n  console.log('Found user:', user);\n\n  // Update user\n  await userService.updateUser(\n    { email: \"david@example.com\" },\n    { age: 36 }\n  );\n\n  // Find users by skill\n  const pythonUsers = await userService.getUsersBySkill(\"Python\");\n  console.log('Python users:', pythonUsers);\n}\n\n// Mongoose ODM (Object Document Mapper)\nnpm install mongoose\n\n// mongoose-config.js\nconst mongoose = require('mongoose');\n\nconst connectDB = async () => {\n  try {\n    await mongoose.connect('mongodb://localhost:27017/myapp');\n    console.log('MongoDB connected with Mongoose');\n  } catch (error) {\n    console.error('Mongoose connection error:', error);\n    process.exit(1);\n  }\n};\n\nmodule.exports = connectDB;\n\n// User schema with Mongoose\nconst mongoose = require('mongoose');\n\nconst userSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: [true, 'Name is required'],\n    trim: true,\n    maxlength: [100, 'Name cannot exceed 100 characters']\n  },\n  email: {\n    type: String,\n    required: [true, 'Email is required'],\n    unique: true,\n    lowercase: true,\n    match: [/^\\S+@\\S+\\.\\S+$/, 'Invalid email format']\n  },\n  age: {\n    type: Number,\n    min: [0, 'Age cannot be negative'],\n    max: [120, 'Age cannot exceed 120']\n  },\n  skills: [{\n    type: String,\n    trim: true\n  }],\n  address: {\n    street: String,\n    city: String,\n    zipcode: String\n  },\n  isActive: {\n    type: Boolean,\n    default: true\n  }\n}, {\n  timestamps: true  // Automatically adds createdAt and updatedAt\n});\n\n// Indexes\nuserSchema.index({ email: 1 });\nuserSchema.index({ age: 1 });\nuserSchema.index({ skills: 1 });\n\n// Methods\nuserSchema.methods.getFullAddress = function() {\n  return `${this.address.street}, ${this.address.city} ${this.address.zipcode}`;\n};\n\n// Static methods\nuserSchema.statics.findBySkill = function(skill) {\n  return this.find({ skills: skill });\n};\n\nconst User = mongoose.model('User', userSchema);\nmodule.exports = User;",
          "duration": 12
        }
      ]
    },
    {
      "id": "redis-fundamentals",
      "title": "Redis In-Memory Database",
      "description": "Master Redis key-value store for caching, sessions, and real-time applications. Learn data types, persistence, and performance optimization.",
      "category": "Database",
      "difficulty": "Intermediate",
      "duration": 70,
      "lessonCount": 1,
      "icon": "redis",
      "color": "#dc382d",
      "order": 32,
      "lessons": [
        {
          "id": "intro",
          "title": "Redis Setup & Data Types",
          "content": "Install Redis, understand in-memory data structures, and learn to work with strings, hashes, lists, sets, and sorted sets.",
          "codeExample": "# Redis Installation\n# Download from redis.io/download\n# Or use package manager:\n# macOS: brew install redis\n# Ubuntu: sudo apt install redis-server\n# Windows: Use WSL or Docker\n\n# Start Redis server\nredis-server\n# or as service:\nsudo systemctl start redis\n\n# Connect to Redis CLI\nredis-cli\n\n# Basic Redis Commands\n# Strings\nSET name \"Alice\"\nGET name\nSET counter 1\nINCR counter\nDECR counter\nSET session:123 \"user_data\" EX 3600  # Expires in 1 hour\nTTL session:123  # Check time to live\n\n# Hashes (like objects)\nHSET user:1 name \"Bob\" email \"bob@example.com\" age 30\nHGET user:1 name\nHGETALL user:1\nHMSET user:2 name \"Charlie\" email \"charlie@example.com\" age 25\nHDEL user:1 age\nHEXISTS user:1 email\n\n# Lists (ordered collections)\nLPUSH queue:tasks \"task1\" \"task2\" \"task3\"\nRPUSH queue:tasks \"task4\"\nLPOP queue:tasks  # Remove from left\nRPOP queue:tasks  # Remove from right\nLRANGE queue:tasks 0 -1  # Get all elements\nLLEN queue:tasks  # Get length\n\n# Sets (unique elements)\nSADD skills \"JavaScript\" \"Python\" \"Java\"\nSADD skills \"Python\"  # Won't add duplicate\nSMEMBERS skills\nSISMEMBER skills \"Python\"\nSREM skills \"Java\"\nSCARD skills  # Get cardinality (count)\n\n# Sorted Sets (unique elements with scores)\nZADD leaderboard 1000 \"player1\"\nZADD leaderboard 1500 \"player2\"\nZADD leaderboard 800 \"player3\"\nZRANGE leaderboard 0 -1 WITHSCORES  # Ascending order\nZREVRANGE leaderboard 0 2 WITHSCORES  # Top 3 players\nZSCORE leaderboard \"player2\"\nZRANK leaderboard \"player1\"  # Get rank\n\n# Keys management\nKEYS *  # List all keys (avoid in production)\nEXISTS user:1\nDEL user:1\nEXPIRE session:456 300  # Set expiration\nPERSIST session:456  # Remove expiration\nTYPE user:2  # Get data type\n\n# Node.js with Redis\nnpm install redis\n\n// redis-config.js\nconst redis = require('redis');\n\nconst client = redis.createClient({\n  host: 'localhost',\n  port: 6379,\n  // password: 'your-password',  // if authentication is enabled\n  // db: 0  // database number\n});\n\nclient.on('connect', () => {\n  console.log('Connected to Redis');\n});\n\nclient.on('error', (err) => {\n  console.error('Redis error:', err);\n});\n\n// For Redis v4+\n// const client = redis.createClient();\n// client.connect();\n\nmodule.exports = client;\n\n// Redis operations in Node.js\nconst client = require('./redis-config');\n\nclass RedisService {\n  // String operations\n  async setString(key, value, expireSeconds = null) {\n    try {\n      if (expireSeconds) {\n        await client.setex(key, expireSeconds, value);\n      } else {\n        await client.set(key, value);\n      }\n    } catch (error) {\n      console.error('Error setting string:', error);\n      throw error;\n    }\n  }\n\n  async getString(key) {\n    try {\n      return await client.get(key);\n    } catch (error) {\n      console.error('Error getting string:', error);\n      throw error;\n    }\n  }\n\n  // Hash operations\n  async setHash(key, fieldValue) {\n    try {\n      await client.hmset(key, fieldValue);\n    } catch (error) {\n      console.error('Error setting hash:', error);\n      throw error;\n    }\n  }\n\n  async getHash(key) {\n    try {\n      return await client.hgetall(key);\n    } catch (error) {\n      console.error('Error getting hash:', error);\n      throw error;\n    }\n  }\n\n  async getHashField(key, field) {\n    try {\n      return await client.hget(key, field);\n    } catch (error) {\n      console.error('Error getting hash field:', error);\n      throw error;\n    }\n  }\n\n  // List operations\n  async pushToList(key, ...values) {\n    try {\n      return await client.lpush(key, ...values);\n    } catch (error) {\n      console.error('Error pushing to list:', error);\n      throw error;\n    }\n  }\n\n  async popFromList(key) {\n    try {\n      return await client.lpop(key);\n    } catch (error) {\n      console.error('Error popping from list:', error);\n      throw error;\n    }\n  }\n\n  async getList(key, start = 0, end = -1) {\n    try {\n      return await client.lrange(key, start, end);\n    } catch (error) {\n      console.error('Error getting list:', error);\n      throw error;\n    }\n  }\n\n  // Set operations\n  async addToSet(key, ...members) {\n    try {\n      return await client.sadd(key, ...members);\n    } catch (error) {\n      console.error('Error adding to set:', error);\n      throw error;\n    }\n  }\n\n  async getSetMembers(key) {\n    try {\n      return await client.smembers(key);\n    } catch (error) {\n      console.error('Error getting set members:', error);\n      throw error;\n    }\n  }\n\n  async isSetMember(key, member) {\n    try {\n      return await client.sismember(key, member);\n    } catch (error) {\n      console.error('Error checking set membership:', error);\n      throw error;\n    }\n  }\n\n  // Sorted set operations\n  async addToSortedSet(key, score, member) {\n    try {\n      return await client.zadd(key, score, member);\n    } catch (error) {\n      console.error('Error adding to sorted set:', error);\n      throw error;\n    }\n  }\n\n  async getSortedSetRange(key, start = 0, end = -1, withScores = false) {\n    try {\n      if (withScores) {\n        return await client.zrange(key, start, end, 'WITHSCORES');\n      }\n      return await client.zrange(key, start, end);\n    } catch (error) {\n      console.error('Error getting sorted set range:', error);\n      throw error;\n    }\n  }\n\n  async getSortedSetRank(key, member) {\n    try {\n      return await client.zrank(key, member);\n    } catch (error) {\n      console.error('Error getting sorted set rank:', error);\n      throw error;\n    }\n  }\n\n  // Key operations\n  async deleteKey(key) {\n    try {\n      return await client.del(key);\n    } catch (error) {\n      console.error('Error deleting key:', error);\n      throw error;\n    }\n  }\n\n  async keyExists(key) {\n    try {\n      return await client.exists(key);\n    } catch (error) {\n      console.error('Error checking key existence:', error);\n      throw error;\n    }\n  }\n\n  async setExpire(key, seconds) {\n    try {\n      return await client.expire(key, seconds);\n    } catch (error) {\n      console.error('Error setting expiration:', error);\n      throw error;\n    }\n  }\n\n  async getTTL(key) {\n    try {\n      return await client.ttl(key);\n    } catch (error) {\n      console.error('Error getting TTL:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage examples\nasync function redisExamples() {\n  const redisService = new RedisService();\n\n  // Caching example\n  await redisService.setString('user:cache:123', JSON.stringify({\n    id: 123,\n    name: 'Alice',\n    email: 'alice@example.com'\n  }), 3600);  // Cache for 1 hour\n\n  // Session management\n  await redisService.setHash('session:abc123', {\n    userId: '123',\n    username: 'alice',\n    loginTime: Date.now().toString()\n  });\n  await redisService.setExpire('session:abc123', 1800);  // 30 minutes\n\n  // Task queue\n  await redisService.pushToList('task:queue', 'process_email', 'generate_report');\n  const nextTask = await redisService.popFromList('task:queue');\n\n  // Real-time leaderboard\n  await redisService.addToSortedSet('game:leaderboard', 1500, 'player1');\n  await redisService.addToSortedSet('game:leaderboard', 2000, 'player2');\n  const topPlayers = await redisService.getSortedSetRange('game:leaderboard', 0, 9, true);\n\n  console.log('Top players:', topPlayers);\n}\n\n// Redis Pub/Sub for real-time messaging\nconst subscriber = redis.createClient();\nconst publisher = redis.createClient();\n\n// Subscribe to channels\nsubscriber.subscribe('news', 'updates');\n\nsubscriber.on('message', (channel, message) => {\n  console.log(`Received message on ${channel}: ${message}`);\n});\n\n// Publish messages\npublisher.publish('news', 'Breaking news!');\npublisher.publish('updates', 'System update completed');",
          "duration": 10
        }
      ]
    },
    {
      "id": "mysql-fundamentals",
      "title": "MySQL Relational Database",
      "description": "Master MySQL database design, SQL queries, indexing, and performance optimization. Learn to build robust relational data systems.",
      "category": "Database",
      "difficulty": "Beginner",
      "duration": 92,
      "lessonCount": 1,
      "icon": "mysql",
      "color": "#4479a1",
      "order": 33,
      "lessons": [
        {
          "id": "intro",
          "title": "MySQL Setup & SQL Basics",
          "content": "Install MySQL, understand relational database concepts, and learn fundamental SQL operations for data manipulation and querying.",
          "codeExample": "-- MySQL Installation\n-- Download from mysql.com/downloads/\n-- Or use package manager:\n-- macOS: brew install mysql\n-- Ubuntu: sudo apt install mysql-server\n-- Windows: Download MSI installer\n\n-- Start MySQL service\n-- Linux: sudo systemctl start mysql\n-- macOS: brew services start mysql\n-- Windows: Start as service\n\n-- Connect to MySQL\nmysql -u root -p\n-- Enter password when prompted\n\n-- Basic Database Operations\n-- Show databases\nSHOW DATABASES;\n\n-- Create database\nCREATE DATABASE myapp;\n\n-- Use database\nUSE myapp;\n\n-- Show tables\nSHOW TABLES;\n\n-- Create tables\nCREATE TABLE users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(150) UNIQUE NOT NULL,\n    age INT,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n);\n\nCREATE TABLE posts (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    title VARCHAR(200) NOT NULL,\n    content TEXT,\n    user_id INT,\n    status ENUM('draft', 'published', 'archived') DEFAULT 'draft',\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n);\n\nCREATE TABLE categories (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE post_categories (\n    post_id INT,\n    category_id INT,\n    PRIMARY KEY (post_id, category_id),\n    FOREIGN KEY (post_id) REFERENCES posts(id) ON DELETE CASCADE,\n    FOREIGN KEY (category_id) REFERENCES categories(id) ON DELETE CASCADE\n);\n\n-- Insert data\nINSERT INTO users (name, email, age) VALUES\n('Alice Johnson', 'alice@example.com', 28),\n('Bob Smith', 'bob@example.com', 32),\n('Charlie Brown', 'charlie@example.com', 25);\n\nINSERT INTO categories (name, description) VALUES\n('Technology', 'Posts about technology and programming'),\n('Lifestyle', 'Posts about lifestyle and personal development'),\n('Business', 'Posts about business and entrepreneurship');\n\nINSERT INTO posts (title, content, user_id, status) VALUES\n('Getting Started with MySQL', 'This is a comprehensive guide to MySQL...', 1, 'published'),\n('Web Development Tips', 'Here are some useful web development tips...', 2, 'published'),\n('My Morning Routine', 'I want to share my daily morning routine...', 3, 'draft');\n\n-- Link posts to categories\nINSERT INTO post_categories (post_id, category_id) VALUES\n(1, 1),  -- MySQL post -> Technology\n(2, 1),  -- Web Dev post -> Technology\n(3, 2);  -- Morning Routine -> Lifestyle\n\n-- Basic SELECT queries\nSELECT * FROM users;\nSELECT name, email FROM users;\nSELECT * FROM users WHERE age > 25;\nSELECT * FROM users WHERE name LIKE 'A%';\nSELECT * FROM posts WHERE status = 'published';\n\n-- JOIN queries\n-- Get posts with user information\nSELECT p.title, p.content, u.name as author, p.created_at\nFROM posts p\nJOIN users u ON p.user_id = u.id\nWHERE p.status = 'published';\n\n-- Get posts with categories\nSELECT p.title, c.name as category\nFROM posts p\nJOIN post_categories pc ON p.id = pc.post_id\nJOIN categories c ON pc.category_id = c.id;\n\n-- Complex query: posts with author and categories\nSELECT \n    p.title,\n    u.name as author,\n    GROUP_CONCAT(c.name) as categories,\n    p.status,\n    p.created_at\nFROM posts p\nJOIN users u ON p.user_id = u.id\nLEFT JOIN post_categories pc ON p.id = pc.post_id\nLEFT JOIN categories c ON pc.category_id = c.id\nGROUP BY p.id;\n\n-- Update data\nUPDATE users SET age = 29 WHERE email = 'alice@example.com';\nUPDATE posts SET status = 'published' WHERE id = 3;\n\n-- Delete data\nDELETE FROM posts WHERE status = 'archived' AND created_at < DATE_SUB(NOW(), INTERVAL 1 YEAR);\n\n-- Indexing for performance\nCREATE INDEX idx_users_email ON users(email);\nCREATE INDEX idx_posts_status ON posts(status);\nCREATE INDEX idx_posts_user_id ON posts(user_id);\nCREATE INDEX idx_posts_created_at ON posts(created_at);\n\n-- Show indexes\nSHOW INDEXES FROM users;\nSHOW INDEXES FROM posts;\n\n-- Aggregate functions\nSELECT COUNT(*) as total_users FROM users;\nSELECT COUNT(*) as published_posts FROM posts WHERE status = 'published';\nSELECT AVG(age) as average_age FROM users;\nSELECT u.name, COUNT(p.id) as post_count\nFROM users u\nLEFT JOIN posts p ON u.id = p.user_id\nGROUP BY u.id, u.name\nORDER BY post_count DESC;\n\n-- Date functions\nSELECT * FROM posts WHERE DATE(created_at) = CURDATE();\nSELECT * FROM posts WHERE created_at >= DATE_SUB(NOW(), INTERVAL 7 DAY);\nSELECT DATE_FORMAT(created_at, '%Y-%m') as month, COUNT(*) as posts_count\nFROM posts\nGROUP BY month\nORDER BY month;\n\n// Node.js with MySQL\nnpm install mysql2\n\n// mysql-config.js\nconst mysql = require('mysql2/promise');\n\nconst pool = mysql.createPool({\n  host: 'localhost',\n  user: 'root',\n  password: 'your_password',\n  database: 'myapp',\n  waitForConnections: true,\n  connectionLimit: 10,\n  queueLimit: 0\n});\n\nmodule.exports = pool;\n\n// User service with MySQL\nconst pool = require('./mysql-config');\n\nclass UserService {\n  async createUser(userData) {\n    const { name, email, age } = userData;\n    try {\n      const [result] = await pool.execute(\n        'INSERT INTO users (name, email, age) VALUES (?, ?, ?)',\n        [name, email, age]\n      );\n      return result.insertId;\n    } catch (error) {\n      console.error('Error creating user:', error);\n      throw error;\n    }\n  }\n\n  async getUserById(id) {\n    try {\n      const [rows] = await pool.execute(\n        'SELECT * FROM users WHERE id = ?',\n        [id]\n      );\n      return rows[0];\n    } catch (error) {\n      console.error('Error getting user:', error);\n      throw error;\n    }\n  }\n\n  async getUserByEmail(email) {\n    try {\n      const [rows] = await pool.execute(\n        'SELECT * FROM users WHERE email = ?',\n        [email]\n      );\n      return rows[0];\n    } catch (error) {\n      console.error('Error getting user by email:', error);\n      throw error;\n    }\n  }\n\n  async getAllUsers() {\n    try {\n      const [rows] = await pool.execute('SELECT * FROM users ORDER BY created_at DESC');\n      return rows;\n    } catch (error) {\n      console.error('Error getting all users:', error);\n      throw error;\n    }\n  }\n\n  async updateUser(id, userData) {\n    const { name, email, age } = userData;\n    try {\n      const [result] = await pool.execute(\n        'UPDATE users SET name = ?, email = ?, age = ? WHERE id = ?',\n        [name, email, age, id]\n      );\n      return result.affectedRows > 0;\n    } catch (error) {\n      console.error('Error updating user:', error);\n      throw error;\n    }\n  }\n\n  async deleteUser(id) {\n    try {\n      const [result] = await pool.execute(\n        'DELETE FROM users WHERE id = ?',\n        [id]\n      );\n      return result.affectedRows > 0;\n    } catch (error) {\n      console.error('Error deleting user:', error);\n      throw error;\n    }\n  }\n\n  async getUsersWithPostCount() {\n    try {\n      const [rows] = await pool.execute(`\n        SELECT \n          u.id,\n          u.name,\n          u.email,\n          COUNT(p.id) as post_count\n        FROM users u\n        LEFT JOIN posts p ON u.id = p.user_id\n        GROUP BY u.id, u.name, u.email\n        ORDER BY post_count DESC\n      `);\n      return rows;\n    } catch (error) {\n      console.error('Error getting users with post count:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage example\nasync function main() {\n  const userService = new UserService();\n\n  try {\n    // Create user\n    const userId = await userService.createUser({\n      name: 'David Wilson',\n      email: 'david@example.com',\n      age: 35\n    });\n    console.log('User created with ID:', userId);\n\n    // Get user\n    const user = await userService.getUserById(userId);\n    console.log('Retrieved user:', user);\n\n    // Update user\n    await userService.updateUser(userId, {\n      name: 'David Wilson Jr.',\n      email: 'david.jr@example.com',\n      age: 36\n    });\n\n    // Get all users with post counts\n    const usersWithPosts = await userService.getUsersWithPostCount();\n    console.log('Users with post counts:', usersWithPosts);\n\n  } catch (error) {\n    console.error('Database operation failed:', error);\n  }\n}\n\n-- Advanced MySQL features\n-- Views\nCREATE VIEW published_posts_view AS\nSELECT \n    p.id,\n    p.title,\n    u.name as author,\n    p.created_at\nFROM posts p\nJOIN users u ON p.user_id = u.id\nWHERE p.status = 'published';\n\n-- Query the view\nSELECT * FROM published_posts_view;\n\n-- Stored procedures\nDELIMITER //\nCREATE PROCEDURE GetUserPosts(IN user_id INT)\nBEGIN\n    SELECT * FROM posts WHERE posts.user_id = user_id;\nEND //\nDELIMITER ;\n\n-- Call stored procedure\nCALL GetUserPosts(1);\n\n-- Triggers\nDELIMITER //\nCREATE TRIGGER update_user_timestamp\nBEFORE UPDATE ON users\nFOR EACH ROW\nBEGIN\n    SET NEW.updated_at = CURRENT_TIMESTAMP;\nEND //\nDELIMITER ;",
          "duration": 15
        }
      ]
    },
    {
      "id": "sqlite-fundamentals",
      "title": "SQLite Embedded Database",
      "description": "Learn SQLite for embedded applications and prototyping. Master lightweight SQL database perfect for development and small applications.",
      "category": "Database",
      "difficulty": "Beginner",
      "duration": 45,
      "lessonCount": 1,
      "icon": "sqlite",
      "color": "#003b57",
      "order": 34,
      "lessons": [
        {
          "id": "intro",
          "title": "SQLite Setup & Operations",
          "content": "Install SQLite, understand its use cases, and learn basic database operations for embedded and development applications.",
          "codeExample": "-- SQLite Installation\n-- Download from sqlite.org/download.html\n-- Or use package manager:\n-- macOS: brew install sqlite\n-- Ubuntu: sudo apt install sqlite3\n-- Windows: Download precompiled binaries\n\n-- Create/Open SQLite database\nsqlite3 myapp.db\n\n-- SQLite commands\n.help              -- Show help\n.databases         -- List databases\n.tables           -- List tables\n.schema           -- Show database schema\n.quit             -- Exit SQLite\n.mode csv         -- Set output mode\n.headers on       -- Show column headers\n\n-- Create tables\nCREATE TABLE users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT NOT NULL,\n    email TEXT UNIQUE NOT NULL,\n    age INTEGER,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE tasks (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT NOT NULL,\n    description TEXT,\n    completed BOOLEAN DEFAULT 0,\n    user_id INTEGER,\n    due_date DATE,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n);\n\n-- Insert sample data\nINSERT INTO users (name, email, age) VALUES\n('Alice Johnson', 'alice@example.com', 28),\n('Bob Smith', 'bob@example.com', 32),\n('Charlie Brown', 'charlie@example.com', 25);\n\nINSERT INTO tasks (title, description, user_id, due_date) VALUES\n('Complete project proposal', 'Write and submit the Q4 project proposal', 1, '2024-01-15'),\n('Review code changes', 'Review pull requests for the new feature', 2, '2024-01-10'),\n('Update documentation', 'Update API documentation with new endpoints', 1, '2024-01-20'),\n('Team meeting', 'Weekly team sync meeting', 3, '2024-01-12');\n\n-- Basic queries\nSELECT * FROM users;\nSELECT name, email FROM users WHERE age > 25;\nSELECT * FROM tasks WHERE completed = 0;\nSELECT * FROM tasks WHERE due_date < DATE('now', '+7 days');\n\n-- JOIN queries\nSELECT \n    t.title,\n    t.description,\n    u.name as assigned_to,\n    t.due_date,\n    t.completed\nFROM tasks t\nJOIN users u ON t.user_id = u.id\nORDER BY t.due_date;\n\n-- Aggregation\nSELECT \n    u.name,\n    COUNT(t.id) as task_count,\n    COUNT(CASE WHEN t.completed = 1 THEN 1 END) as completed_tasks\nFROM users u\nLEFT JOIN tasks t ON u.id = t.user_id\nGROUP BY u.id, u.name;\n\n-- Update and delete\nUPDATE tasks SET completed = 1 WHERE id = 2;\nUPDATE tasks SET due_date = DATE('now', '+3 days') WHERE id = 1;\nDELETE FROM tasks WHERE completed = 1 AND created_at < DATE('now', '-30 days');\n\n-- Indexes for performance\nCREATE INDEX idx_users_email ON users(email);\nCREATE INDEX idx_tasks_user_id ON tasks(user_id);\nCREATE INDEX idx_tasks_due_date ON tasks(due_date);\n\n-- SQLite specific features\n-- Explain query plan\nEXPLAIN QUERY PLAN SELECT * FROM tasks WHERE user_id = 1;\n\n-- Analyze database\nANALYZE;\n\n-- Vacuum (rebuild database)\nVACUUM;\n\n-- Export data\n.mode csv\n.output users.csv\nSELECT * FROM users;\n.output stdout\n\n-- Import data\n.mode csv\n.import data.csv temp_table\n\n// Node.js with SQLite\nnpm install sqlite3\n// or for newer async/await support:\nnpm install sqlite\n\n// sqlite-config.js\nconst sqlite3 = require('sqlite3').verbose();\nconst { open } = require('sqlite');\n\nasync function openDB() {\n  const db = await open({\n    filename: './myapp.db',\n    driver: sqlite3.Database\n  });\n  \n  // Enable foreign keys\n  await db.exec('PRAGMA foreign_keys = ON');\n  \n  return db;\n}\n\nmodule.exports = openDB;\n\n// Task service with SQLite\nconst openDB = require('./sqlite-config');\n\nclass TaskService {\n  constructor() {\n    this.db = null;\n  }\n\n  async init() {\n    this.db = await openDB();\n    await this.createTables();\n  }\n\n  async createTables() {\n    await this.db.exec(`\n      CREATE TABLE IF NOT EXISTS users (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        name TEXT NOT NULL,\n        email TEXT UNIQUE NOT NULL,\n        age INTEGER,\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n      );\n      \n      CREATE TABLE IF NOT EXISTS tasks (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        title TEXT NOT NULL,\n        description TEXT,\n        completed BOOLEAN DEFAULT 0,\n        user_id INTEGER,\n        due_date DATE,\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        FOREIGN KEY (user_id) REFERENCES users(id)\n      );\n    `);\n  }\n\n  async createTask(taskData) {\n    const { title, description, user_id, due_date } = taskData;\n    try {\n      const result = await this.db.run(\n        'INSERT INTO tasks (title, description, user_id, due_date) VALUES (?, ?, ?, ?)',\n        [title, description, user_id, due_date]\n      );\n      return result.lastID;\n    } catch (error) {\n      console.error('Error creating task:', error);\n      throw error;\n    }\n  }\n\n  async getTaskById(id) {\n    try {\n      return await this.db.get(\n        'SELECT * FROM tasks WHERE id = ?',\n        [id]\n      );\n    } catch (error) {\n      console.error('Error getting task:', error);\n      throw error;\n    }\n  }\n\n  async getTasksByUser(userId) {\n    try {\n      return await this.db.all(\n        'SELECT * FROM tasks WHERE user_id = ? ORDER BY due_date',\n        [userId]\n      );\n    } catch (error) {\n      console.error('Error getting user tasks:', error);\n      throw error;\n    }\n  }\n\n  async getPendingTasks() {\n    try {\n      return await this.db.all(`\n        SELECT \n          t.*,\n          u.name as user_name\n        FROM tasks t\n        JOIN users u ON t.user_id = u.id\n        WHERE t.completed = 0\n        ORDER BY t.due_date\n      `);\n    } catch (error) {\n      console.error('Error getting pending tasks:', error);\n      throw error;\n    }\n  }\n\n  async completeTask(id) {\n    try {\n      const result = await this.db.run(\n        'UPDATE tasks SET completed = 1 WHERE id = ?',\n        [id]\n      );\n      return result.changes > 0;\n    } catch (error) {\n      console.error('Error completing task:', error);\n      throw error;\n    }\n  }\n\n  async deleteTask(id) {\n    try {\n      const result = await this.db.run(\n        'DELETE FROM tasks WHERE id = ?',\n        [id]\n      );\n      return result.changes > 0;\n    } catch (error) {\n      console.error('Error deleting task:', error);\n      throw error;\n    }\n  }\n\n  async getTaskStatistics() {\n    try {\n      const stats = await this.db.get(`\n        SELECT \n          COUNT(*) as total_tasks,\n          COUNT(CASE WHEN completed = 1 THEN 1 END) as completed_tasks,\n          COUNT(CASE WHEN completed = 0 THEN 1 END) as pending_tasks,\n          COUNT(CASE WHEN due_date < DATE('now') AND completed = 0 THEN 1 END) as overdue_tasks\n        FROM tasks\n      `);\n      return stats;\n    } catch (error) {\n      console.error('Error getting task statistics:', error);\n      throw error;\n    }\n  }\n\n  async close() {\n    if (this.db) {\n      await this.db.close();\n    }\n  }\n}\n\n// Usage example\nasync function main() {\n  const taskService = new TaskService();\n  await taskService.init();\n\n  try {\n    // Create task\n    const taskId = await taskService.createTask({\n      title: 'Learn SQLite',\n      description: 'Complete SQLite tutorial and practice examples',\n      user_id: 1,\n      due_date: '2024-01-25'\n    });\n    console.log('Task created with ID:', taskId);\n\n    // Get pending tasks\n    const pendingTasks = await taskService.getPendingTasks();\n    console.log('Pending tasks:', pendingTasks);\n\n    // Get statistics\n    const stats = await taskService.getTaskStatistics();\n    console.log('Task statistics:', stats);\n\n    // Complete task\n    await taskService.completeTask(taskId);\n    console.log('Task completed');\n\n  } catch (error) {\n    console.error('Database operation failed:', error);\n  } finally {\n    await taskService.close();\n  }\n}\n\n// SQLite with better-sqlite3 (synchronous, faster)\nnpm install better-sqlite3\n\nconst Database = require('better-sqlite3');\n\nclass FastTaskService {\n  constructor() {\n    this.db = new Database('./myapp.db');\n    this.db.pragma('foreign_keys = ON');\n    this.createTables();\n  }\n\n  createTables() {\n    this.db.exec(`\n      CREATE TABLE IF NOT EXISTS users (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        name TEXT NOT NULL,\n        email TEXT UNIQUE NOT NULL,\n        age INTEGER,\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n      );\n      \n      CREATE TABLE IF NOT EXISTS tasks (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        title TEXT NOT NULL,\n        description TEXT,\n        completed BOOLEAN DEFAULT 0,\n        user_id INTEGER,\n        due_date DATE,\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        FOREIGN KEY (user_id) REFERENCES users(id)\n      );\n    `);\n  }\n\n  createTask(taskData) {\n    const stmt = this.db.prepare(\n      'INSERT INTO tasks (title, description, user_id, due_date) VALUES (?, ?, ?, ?)'\n    );\n    const result = stmt.run(taskData.title, taskData.description, taskData.user_id, taskData.due_date);\n    return result.lastInsertRowid;\n  }\n\n  getAllTasks() {\n    const stmt = this.db.prepare(`\n      SELECT \n        t.*,\n        u.name as user_name\n      FROM tasks t\n      JOIN users u ON t.user_id = u.id\n      ORDER BY t.due_date\n    `);\n    return stmt.all();\n  }\n\n  close() {\n    this.db.close();\n  }\n}",
          "duration": 8
        }
      ]
    }
  ]
}
